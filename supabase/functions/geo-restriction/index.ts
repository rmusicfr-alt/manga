/*
  # –ì–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω
  
  –ë–ª–æ–∫–∏—Ä—É–µ—Ç –¥–æ—Å—Ç—É–ø –∏–∑:
  - –Æ–∂–Ω–æ–π –ö–æ—Ä–µ–∏ (KR)
  - –ì–µ—Ä–º–∞–Ω–∏–∏ (DE)
  - –ö–∏—Ç–∞—è (CN)
  - –Ø–ø–æ–Ω–∏–∏ (JP) - –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ
*/

interface RequestWithCountry extends Request {
  cf?: {
    country?: string;
  };
}

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
  "Access-Control-Allow-Headers": "Content-Type, Authorization",
};

// –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—Ç—Ä–∞–Ω—ã
const BLOCKED_COUNTRIES = ['KR', 'DE', 'CN', 'JP'];

// –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å—Ç—Ä–∞–Ω
const BLOCK_MESSAGES = {
  'KR': 'Ïù¥ ÏΩòÌÖêÏ∏†Îäî Í∑ÄÌïòÏùò ÏßÄÏó≠ÏóêÏÑú ÏÇ¨Ïö©Ìï† Ïàò ÏóÜÏäµÎãàÎã§.',
  'DE': 'Dieser Inhalt ist in Ihrer Region nicht verf√ºgbar.',
  'CN': 'Ê≠§ÂÜÖÂÆπÂú®ÊÇ®ÁöÑÂú∞Âå∫‰∏çÂèØÁî®„ÄÇ',
  'JP': '„Åì„ÅÆ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅØ„Åä‰Ωè„Åæ„ÅÑ„ÅÆÂú∞Âüü„Åß„ÅØ„ÅîÂà©Áî®„ÅÑ„Åü„Å†„Åë„Åæ„Åõ„Çì„ÄÇ',
  'default': 'This content is not available in your region.'
};

function getCountryFromRequest(request: Request): string | null {
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º Cloudflare –∑–∞–≥–æ–ª–æ–≤–∫–∏
  const cfCountry = (request as RequestWithCountry).cf?.country;
  if (cfCountry) return cfCountry;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏
  const countryHeader = request.headers.get('CF-IPCountry') || 
                       request.headers.get('X-Country-Code') ||
                       request.headers.get('CloudFront-Viewer-Country');
  
  return countryHeader;
}

function isBlocked(country: string | null): boolean {
  if (!country) return false;
  return BLOCKED_COUNTRIES.includes(country.toUpperCase());
}

function getBlockMessage(country: string): string {
  return BLOCK_MESSAGES[country] || BLOCK_MESSAGES.default;
}

Deno.serve(async (req: Request) => {
  try {
    if (req.method === "OPTIONS") {
      return new Response(null, {
        status: 200,
        headers: corsHeaders,
      });
    }

    const country = getCountryFromRequest(req);
    
    if (isBlocked(country)) {
      console.log(`üö´ Blocked access from: ${country}`);
      
      return new Response(
        JSON.stringify({
          blocked: true,
          country: country,
          message: getBlockMessage(country || 'default'),
          timestamp: new Date().toISOString()
        }),
        {
          status: 403,
          headers: {
            'Content-Type': 'application/json',
            ...corsHeaders,
          }
        }
      );
    }

    // –†–∞–∑—Ä–µ—à–µ–Ω–Ω–∞—è —Å—Ç—Ä–∞–Ω–∞
    return new Response(
      JSON.stringify({
        blocked: false,
        country: country,
        message: 'Access granted',
        timestamp: new Date().toISOString()
      }),
      {
        status: 200,
        headers: {
          'Content-Type': 'application/json',
          ...corsHeaders,
        }
      }
    );

  } catch (error) {
    console.error('Geo-restriction error:', error);
    
    return new Response(
      JSON.stringify({
        error: 'Internal server error',
        timestamp: new Date().toISOString()
      }),
      {
        status: 500,
        headers: {
          'Content-Type': 'application/json',
          ...corsHeaders,
        }
      }
    );
  }
});