/*
  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤
  
  –§—É–Ω–∫—Ü–∏–∏:
  - –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º –∏ –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—É—é –ª–µ–∫—Å–∏–∫—É
  - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–¥–æ–±—Ä–µ–Ω–∏–µ/–æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ
  - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º
*/

import { createClient } from 'npm:@supabase/supabase-js@2';

const corsHeaders = {
  "Access-Control-Allow-Origin": "*",
  "Access-Control-Allow-Methods": "GET, POST, PUT, DELETE, OPTIONS",
  "Access-Control-Allow-Headers": "Content-Type, Authorization",
};

const supabase = createClient(
  Deno.env.get('SUPABASE_URL') ?? '',
  Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
);

// –°–ø–∏—Å–æ–∫ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤ (–±–∞–∑–æ–≤—ã–π)
const BANNED_WORDS = [
  '—Å–ø–∞–º', '—Ä–µ–∫–ª–∞–º–∞', '–∫–∞–∑–∏–Ω–æ', '—Å—Ç–∞–≤–∫–∏', '–∫—Ä–µ–¥–∏—Ç',
  // –î–æ–±–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
];

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º
function isSpam(content: string): boolean {
  const lowerContent = content.toLowerCase();
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
  for (const word of BANNED_WORDS) {
    if (lowerContent.includes(word)) {
      return true;
    }
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏–µ—Å—è —Å–∏–º–≤–æ–ª—ã
  if (/(.)\1{10,}/.test(content)) {
    return true;
  }
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Å—ã–ª–æ–∫
  const linkCount = (content.match(/https?:\/\/\S+/g) || []).length;
  if (linkCount > 2) {
    return true;
  }
  
  return false;
}

// –û—á–∏—Å—Ç–∫–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
function cleanContent(content: string): string {
  // –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
  content = content.replace(/\s+/g, ' ').trim();
  
  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
  if (content.length > 1000) {
    content = content.substring(0, 1000) + '...';
  }
  
  return content;
}

interface CommentModerationRequest {
  commentId: string;
  content: string;
  userId: string;
  mangaId: string;
}

Deno.serve(async (req: Request) => {
  try {
    if (req.method === "OPTIONS") {
      return new Response(null, {
        status: 200,
        headers: corsHeaders,
      });
    }

    if (req.method === "POST") {
      const { commentId, content, userId, mangaId }: CommentModerationRequest = await req.json();

      if (!commentId || !content || !userId) {
        return new Response(
          JSON.stringify({ error: 'Missing required fields' }),
          { status: 400, headers: { 'Content-Type': 'application/json', ...corsHeaders } }
        );
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–∞–º
      const spam = isSpam(content);
      const cleanedContent = cleanContent(content);
      
      let moderationStatus = 'approved';
      let moderationReason = '';

      if (spam) {
        moderationStatus = 'rejected';
        moderationReason = 'Detected as spam';
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
      const { error: updateError } = await supabase
        .from('comments')
        .update({
          content: cleanedContent,
          is_moderated: moderationStatus === 'approved',
          moderation_reason: moderationReason
        })
        .eq('id', commentId);

      if (updateError) {
        console.error('Error updating comment:', updateError);
        return new Response(
          JSON.stringify({ error: 'Database error' }),
          { status: 500, headers: { 'Content-Type': 'application/json', ...corsHeaders } }
        );
      }

      // –ï—Å–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω, —É–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      if (moderationStatus === 'rejected') {
        await supabase
          .from('notifications')
          .insert({
            user_id: userId,
            type: 'system',
            title: '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ—Ç–∫–ª–æ–Ω–µ–Ω',
            message: `–í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –±—ã–ª –æ—Ç–∫–ª–æ–Ω–µ–Ω –º–æ–¥–µ—Ä–∞—Ü–∏–µ–π. –ü—Ä–∏—á–∏–Ω–∞: ${moderationReason}`
          });
      }

      console.log(`üõ°Ô∏è Comment moderated: ${commentId}, status: ${moderationStatus}`);

      return new Response(
        JSON.stringify({
          success: true,
          status: moderationStatus,
          reason: moderationReason,
          cleanedContent: cleanedContent
        }),
        {
          status: 200,
          headers: {
            'Content-Type': 'application/json',
            ...corsHeaders,
          }
        }
      );
    }

    return new Response(
      JSON.stringify({ error: 'Method not allowed' }),
      { status: 405, headers: { 'Content-Type': 'application/json', ...corsHeaders } }
    );

  } catch (error) {
    console.error('Moderation error:', error);
    
    return new Response(
      JSON.stringify({
        error: 'Internal server error',
        timestamp: new Date().toISOString()
      }),
      {
        status: 500,
        headers: {
          'Content-Type': 'application/json',
          ...corsHeaders,
        }
      }
    );
  }
});