// –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å —Å —Å–∏—Å—Ç–µ–º–æ–π –ø–æ–¥–ø–∏—Å–æ–∫ –¥–ª—è —Ç–∞–π—Ç–ª–æ–≤
(function() {
    'use strict';

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –∞–¥–º–∏–Ω–∫–∏
    let currentSection = 'dashboard';
    let currentUser = null;
    let isLoggedIn = false;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    async function checkAdminAccess() {
        try {
            if (!window.supabase) {
                await waitForSupabase();
            }

            const { data: { user } } = await window.supabase.auth.getUser();
            
            if (!user) {
                showLoginForm();
                return false;
            }

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞ –≤ –±–∞–∑–µ
            const { data: profile, error } = await window.supabase
                .from('users')
                .select('is_admin')
                .eq('id', user.id)
                .single();

            if (error || !profile?.is_admin) {
                showAccessDenied();
                return false;
            }

            currentUser = user;
            isLoggedIn = true;
            return true;
        } catch (error) {
            console.error('Admin access check error:', error);
            showLoginForm();
            return false;
        }
    }

    // –û–∂–∏–¥–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase
    function waitForSupabase() {
        return new Promise((resolve) => {
            if (window.supabase) {
                resolve();
                return;
            }
            
            const checkSupabase = () => {
                if (window.supabase) {
                    resolve();
                } else {
                    setTimeout(checkSupabase, 100);
                }
            };
            
            checkSupabase();
        });
    }

    // –ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã –≤—Ö–æ–¥–∞
    function showLoginForm() {
        document.body.innerHTML = `
            <div class="login-container">
                <div class="login-form">
                    <h1 class="login-title">ü¶ä Light Fox Manga</h1>
                    <h2>–ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å</h2>
                    <form id="adminLoginForm">
                        <input type="email" class="login-input" id="adminEmail" placeholder="Email –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞" required>
                        <input type="password" class="login-input" id="adminPassword" placeholder="–ü–∞—Ä–æ–ª—å" required>
                        <button type="submit" class="login-btn">–í–æ–π—Ç–∏ –≤ –∞–¥–º–∏–Ω–∫—É</button>
                    </form>
                    <div id="loginError" style="color: #dc2626; margin-top: 10px; display: none;"></div>
                    <div style="margin-top: 20px; padding: 15px; background: rgba(139, 92, 246, 0.1); border-radius: 8px; font-size: 0.9rem;">
                        <strong>–î–µ–º–æ –¥–æ—Å—Ç—É–ø:</strong><br>
                        Email: admin@lightfox.com<br>
                        –ü–∞—Ä–æ–ª—å: admin123
                    </div>
                </div>
            </div>
        `;

        document.getElementById('adminLoginForm').addEventListener('submit', handleAdminLogin);
    }

    // –ü–æ–∫–∞–∑ –æ—Ç–∫–∞–∑–∞ –≤ –¥–æ—Å—Ç—É–ø–µ
    function showAccessDenied() {
        document.body.innerHTML = `
            <div class="login-container">
                <div class="login-form">
                    <h1 style="color: #dc2626;">üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω</h1>
                    <p>–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞</p>
                    <a href="index.html" class="login-btn" style="text-decoration: none; display: inline-block;">–ù–∞ –≥–ª–∞–≤–Ω—É—é</a>
                </div>
            </div>
        `;
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞ –∞–¥–º–∏–Ω–∞
    async function handleAdminLogin(e) {
        e.preventDefault();
        
        const email = document.getElementById('adminEmail').value;
        const password = document.getElementById('adminPassword').value;
        const errorDiv = document.getElementById('loginError');

        try {
            const { data, error } = await window.supabase.auth.signInWithPassword({
                email,
                password
            });

            if (error) throw error;

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∞
            const hasAccess = await checkAdminAccess();
            if (hasAccess) {
                initializeAdminPanel();
            }
        } catch (error) {
            errorDiv.textContent = '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: ' + error.message;
            errorDiv.style.display = 'block';
        }
    }

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª–∏
    function initializeAdminPanel() {
        createAdminInterface();
        loadDashboard();
    }

    // –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –∞–¥–º–∏–Ω–∫–∏
    function createAdminInterface() {
        document.body.innerHTML = `
            <link rel="stylesheet" href="css/admin.css">
            
            <!-- Admin Header -->
            <header class="admin-header">
                <div class="admin-logo">ü¶ä Light Fox Admin</div>
                <nav class="admin-nav">
                    <button class="nav-btn active" onclick="switchSection('dashboard')">üìä –î–∞—à–±–æ—Ä–¥</button>
                    <button class="nav-btn" onclick="switchSection('manga')">üìö –ú–∞–Ω–≥–∞</button>
                    <button class="nav-btn" onclick="switchSection('news')">üì∞ –ù–æ–≤–æ—Å—Ç–∏</button>
                    <button class="nav-btn" onclick="switchSection('users')">üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</button>
                    <button class="nav-btn donations" onclick="switchSection('donations')">üí∞ –î–æ–Ω–∞—Ç—ã</button>
                    <button class="nav-btn" onclick="switchSection('comments')">üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏</button>
                </nav>
                <div class="admin-controls">
                    <span>üë§ ${currentUser.email}</span>
                    <button class="logout-btn" onclick="adminLogout()">–í—ã–π—Ç–∏</button>
                </div>
            </header>

            <!-- Main Content -->
            <main class="main-content">
                <div class="container">
                    <!-- Dashboard Section -->
                    <section class="content-section active" id="dashboard-section">
                        <div class="section-header">
                            <h2 class="section-title">üìä –î–∞—à–±–æ—Ä–¥</h2>
                        </div>
                        <div class="section-content" id="dashboard-content">
                            <div class="loading">
                                <div class="spinner"></div>
                                –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏...
                            </div>
                        </div>
                    </section>

                    <!-- Manga Section -->
                    <section class="content-section" id="manga-section">
                        <div class="section-header">
                            <h2 class="section-title">üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞–Ω–≥–æ–π</h2>
                            <button class="btn btn-primary" onclick="showAddMangaForm()">
                                <span>‚ûï</span>
                                –î–æ–±–∞–≤–∏—Ç—å —Ç–∞–π—Ç–ª
                            </button>
                        </div>
                        <div class="section-content" id="manga-content">
                            <!-- Content will be loaded here -->
                        </div>
                    </section>

                    <!-- News Section -->
                    <section class="content-section" id="news-section">
                        <div class="section-header">
                            <h2 class="section-title">üì∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç—è–º–∏</h2>
                            <button class="btn btn-primary" onclick="showAddNewsForm()">
                                <span>‚ûï</span>
                                –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å
                            </button>
                        </div>
                        <div class="section-content" id="news-content">
                            <!-- Content will be loaded here -->
                        </div>
                    </section>

                    <!-- Users Section -->
                    <section class="content-section" id="users-section">
                        <div class="section-header">
                            <h2 class="section-title">üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏</h2>
                        </div>
                        <div class="section-content" id="users-content">
                            <!-- Content will be loaded here -->
                        </div>
                    </section>

                    <!-- Donations Section -->
                    <section class="content-section" id="donations-section">
                        <div class="section-header">
                            <h2 class="section-title">üí∞ –î–æ–Ω–∞—Ç—ã –∏ –ø—Ä–æ–µ–∫—Ç—ã</h2>
                            <button class="btn btn-donation" onclick="showAddProjectForm()">
                                <span>üöÄ</span>
                                –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ–µ–∫—Ç
                            </button>
                        </div>
                        <div class="section-content" id="donations-content">
                            <!-- Content will be loaded here -->
                        </div>
                    </section>

                    <!-- Comments Section -->
                    <section class="content-section" id="comments-section">
                        <div class="section-header">
                            <h2 class="section-title">üí¨ –ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</h2>
                        </div>
                        <div class="section-content" id="comments-content">
                            <!-- Content will be loaded here -->
                        </div>
                    </section>
                </div>
            </main>

            <!-- Notification -->
            <div class="notification" id="notification"></div>
        `;
    }

    // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤
    function switchSection(section) {
        // Update nav buttons
        document.querySelectorAll('.nav-btn').forEach(btn => btn.classList.remove('active'));
        event.target.classList.add('active');

        // Update content sections
        document.querySelectorAll('.content-section').forEach(sec => sec.classList.remove('active'));
        document.getElementById(section + '-section').classList.add('active');

        currentSection = section;

        // Load section content
        switch(section) {
            case 'dashboard':
                loadDashboard();
                break;
            case 'manga':
                loadMangaManagement();
                break;
            case 'news':
                loadNewsManagement();
                break;
            case 'users':
                loadUsersManagement();
                break;
            case 'donations':
                loadDonationsManagement();
                break;
            case 'comments':
                loadCommentsModeration();
                break;
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞
    async function loadDashboard() {
        const content = document.getElementById('dashboard-content');
        if (!content) return;

        try {
            // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            const { data: mangaStats } = await window.supabase
                .from('manga')
                .select('id, current_donations, rating')
                .eq('is_active', true);

            const { data: userStats } = await window.supabase
                .from('users')
                .select('id, total_donations, created_at');

            const { data: commentStats } = await window.supabase
                .from('comments')
                .select('id, created_at');

            const totalManga = mangaStats?.length || 0;
            const totalUsers = userStats?.length || 0;
            const totalComments = commentStats?.length || 0;
            const totalDonations = mangaStats?.reduce((sum, m) => sum + (m.current_donations || 0), 0) || 0;

            content.innerHTML = `
                <div class="dashboard-grid">
                    <div class="stat-card">
                        <div class="stat-number">${totalManga}</div>
                        <div class="stat-label">–¢–∞–π—Ç–ª–æ–≤</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">${totalUsers}</div>
                        <div class="stat-label">–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">${totalComments}</div>
                        <div class="stat-label">–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤</div>
                    </div>
                    <div class="stat-card">
                        <div class="stat-number">${(totalDonations / 100).toLocaleString()}‚ÇΩ</div>
                        <div class="stat-label">–î–æ–Ω–∞—Ç–æ–≤</div>
                    </div>
                </div>

                <div style="margin-top: 30px;">
                    <h3>üöÄ –ü—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω!</h3>
                    <p>–í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞—é—Ç —á–µ—Ä–µ–∑ Supabase. –°–∞–π—Ç –≥–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é.</p>
                    
                    <div style="margin-top: 20px; padding: 20px; background: rgba(16, 185, 129, 0.1); border-radius: 8px; border: 1px solid rgba(16, 185, 129, 0.3);">
                        <h4 style="color: #059669; margin-bottom: 10px;">‚úÖ –ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</h4>
                        <ul style="color: #059669; margin: 0; padding-left: 20px;">
                            <li>üóÑÔ∏è PostgreSQL –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö</li>
                            <li>üîê –ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è</li>
                            <li>üìÅ –§–∞–π–ª–æ–≤–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ</li>
                            <li>üí∞ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π</li>
                            <li>üåç –ì–µ–æ–±–ª–æ–∫–∏—Ä–æ–≤–∫–∞</li>
                            <li>üîî Real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</li>
                            <li>üì∞ –°–∏—Å—Ç–µ–º–∞ –Ω–æ–≤–æ—Å—Ç–µ–π</li>
                            <li>üíé –°–∏—Å—Ç–µ–º–∞ –ø–æ–¥–ø–∏—Å–æ–∫ –ø–æ —Ç–∞–π—Ç–ª–∞–º</li>
                        </ul>
                    </div>
                </div>
            `;
        } catch (error) {
            content.innerHTML = `
                <div style="text-align: center; padding: 40px;">
                    <h3 style="color: #dc2626;">‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Supabase</h3>
                    <p>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è</p>
                    <button class="btn btn-primary" onclick="location.reload()">–ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å</button>
                </div>
            `;
        }
    }

    // –ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞–Ω–≥–∏
    function showAddMangaForm() {
        const content = document.getElementById('manga-content');
        content.innerHTML = `
            <div class="form-container">
                <h3>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ç–∞–π—Ç–ª</h3>
                <form id="addMangaForm" class="form-grid">
                    <div class="form-group">
                        <label class="form-label">–ù–∞–∑–≤–∞–Ω–∏–µ</label>
                        <input type="text" class="form-input" id="mangaTitle" required>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">–û–ø–∏—Å–∞–Ω–∏–µ</label>
                        <textarea class="form-textarea" id="mangaDescription" rows="4"></textarea>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">–û–±–ª–æ–∂–∫–∞ (URL)</label>
                        <input type="url" class="form-input" id="mangaCover" placeholder="https://images.pexels.com/photos/1591056/pexels-photo-1591056.jpeg">
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">–¢–∏–ø</label>
                        <select class="form-select" id="mangaType">
                            <option value="–ê–Ω–∏–º–µ">–ê–Ω–∏–º–µ</option>
                            <option value="–ú–∞–Ω–≥–∞">–ú–∞–Ω–≥–∞</option>
                            <option value="–ú–∞–Ω—å—Ö—É–∞">–ú–∞–Ω—å—Ö—É–∞</option>
                            <option value="–ú–∞–Ω—Ö–≤–∞">–ú–∞–Ω—Ö–≤–∞</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">–°—Ç–∞—Ç—É—Å</label>
                        <select class="form-select" id="mangaStatus">
                            <option value="–í—ã—Ö–æ–¥–∏—Ç">–í—ã—Ö–æ–¥–∏—Ç</option>
                            <option value="–ó–∞–≤–µ—Ä—à—ë–Ω">–ó–∞–≤–µ—Ä—à—ë–Ω</option>
                            <option value="–ó–∞–º–æ—Ä–æ–∂–µ–Ω">–ó–∞–º–æ—Ä–æ–∂–µ–Ω</option>
                            <option value="–ê–Ω–æ–Ω—Å">–ê–Ω–æ–Ω—Å</option>
                        </select>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">–ì–æ–¥</label>
                        <input type="number" class="form-input" id="mangaYear" min="1900" max="2030" value="2024">
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">–ñ–∞–Ω—Ä—ã (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)</label>
                        <input type="text" class="form-input" id="mangaGenres" placeholder="–≠–∫—à–µ–Ω, –î—Ä–∞–º–∞, –§—ç–Ω—Ç–µ–∑–∏">
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)</label>
                        <input type="text" class="form-input" id="mangaCategories" placeholder="–°—ë–Ω–µ–Ω, –°—ç–π–Ω—ç–Ω">
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">–í—Å–µ–≥–æ —Å–µ—Ä–∏–π</label>
                        <input type="number" class="form-input" id="mangaTotalEpisodes" min="1" value="12">
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">–î–æ—Å—Ç—É–ø–Ω–æ —Å–µ—Ä–∏–π</label>
                        <input type="number" class="form-input" id="mangaAvailableEpisodes" min="0" value="0">
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">–¶–µ–ª—å –¥–æ–Ω–∞—Ç–∞ (‚ÇΩ)</label>
                        <input type="number" class="form-input" id="mangaDonationGoal" min="1000" value="10000">
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">üîë –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏ (–º–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ)</label>
                        <div class="subscription-checkboxes" style="display: grid; grid-template-columns: repeat(2, 1fr); gap: 12px; margin-top: 8px;">
                            <div class="form-checkbox">
                                <input type="checkbox" id="subFree" value="free" checked>
                                <label for="subFree">üìñ –õ—é–±–∏—Ç–µ–ª–∏ –ú–∞–Ω–≥–∏ (Free)</label>
                            </div>
                            <div class="form-checkbox">
                                <input type="checkbox" id="subBasic" value="basic">
                                <label for="subBasic">üéØ –õ—é–±–∏—Ç–µ–ª–∏ –ü–∏–∫–∞ (Basic)</label>
                            </div>
                            <div class="form-checkbox">
                                <input type="checkbox" id="subPremium" value="premium">
                                <label for="subPremium">üëë –û—Ä–¥–µ–Ω –®–µ–π—Ö–æ–≤ (Premium)</label>
                            </div>
                            <div class="form-checkbox">
                                <input type="checkbox" id="subVip" value="vip">
                                <label for="subVip">üåü –õ–∏—Å—è–º–±—ã (VIP)</label>
                            </div>
                        </div>
                        <small style="color: var(--secondary-color); margin-top: 8px; display: block;">
                            üí° –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –±–æ–ª–µ–µ –≤—ã—Å–æ–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—é—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–æ–Ω—Ç–µ–Ω—Ç—É –Ω–∏–∂–Ω–∏—Ö —É—Ä–æ–≤–Ω–µ–π
                        </small>
                    </div>
                    
                    <div class="form-actions" style="grid-column: 1 / -1;">
                        <button type="submit" class="btn btn-primary">–°–æ–∑–¥–∞—Ç—å —Ç–∞–π—Ç–ª</button>
                        <button type="button" class="btn btn-secondary" onclick="loadMangaManagement()">–û—Ç–º–µ–Ω–∞</button>
                    </div>
                </form>
            </div>
        `;

        document.getElementById('addMangaForm').addEventListener('submit', handleAddManga);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞–Ω–≥–∏
    async function handleAddManga(e) {
        e.preventDefault();
        
        // –°–æ–±–∏—Ä–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏
        const selectedSubscriptions = [];
        document.querySelectorAll('.subscription-checkboxes input[type="checkbox"]:checked').forEach(checkbox => {
            selectedSubscriptions.push(checkbox.value);
        });

        const formData = {
            title: document.getElementById('mangaTitle').value,
            description: document.getElementById('mangaDescription').value,
            cover_url: document.getElementById('mangaCover').value || null,
            type: document.getElementById('mangaType').value,
            status: document.getElementById('mangaStatus').value,
            year: parseInt(document.getElementById('mangaYear').value),
            genres: document.getElementById('mangaGenres').value.split(',').map(g => g.trim()).filter(g => g),
            categories: document.getElementById('mangaCategories').value.split(',').map(c => c.trim()).filter(c => c),
            total_episodes: parseInt(document.getElementById('mangaTotalEpisodes').value),
            available_episodes: parseInt(document.getElementById('mangaAvailableEpisodes').value),
            donation_goal: parseInt(document.getElementById('mangaDonationGoal').value) * 100, // –í –∫–æ–ø–µ–π–∫–∞—Ö
            subscription_tiers: selectedSubscriptions, // –ú–∞—Å—Å–∏–≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–¥–ø–∏—Å–æ–∫
            subscription_tier: selectedSubscriptions.includes('free') ? 'free' : selectedSubscriptions[0] // –ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
        };

        try {
            const { data, error } = await window.supabase
                .from('manga')
                .insert(formData)
                .select()
                .single();

            if (error) throw error;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º –µ—Å–ª–∏ –µ—Å—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–∏–∏
            if (formData.available_episodes > 0 && window.NotificationSystem) {
                await window.NotificationSystem.createEpisodeNotification(data.id, formData.available_episodes);
            }

            showNotification('–¢–∞–π—Ç–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', 'success');
            loadMangaManagement();
        } catch (error) {
            showNotification('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è: ' + error.message, 'error');
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –º–∞–Ω–≥–æ–π
    async function loadMangaManagement() {
        const content = document.getElementById('manga-content');
        if (!content) return;

        try {
            const { data: manga, error } = await window.supabase
                .from('manga')
                .select('*')
                .order('created_at', { ascending: false });

            if (error) throw error;

            content.innerHTML = `
                <div class="manga-list">
                    ${manga.map(item => `
                        <div class="manga-item">
                            <div class="manga-item-header">
                                <div class="manga-item-title">${item.title}</div>
                                <div class="manga-item-meta">
                                    ${item.type} ‚Ä¢ ${item.status} ‚Ä¢ ${item.available_episodes}/${item.total_episodes} —Å–µ—Ä–∏–π
                                    <br>
                                    <strong>–ü–æ–¥–ø–∏—Å–∫–∏:</strong> ${(item.subscription_tiers || [item.subscription_tier]).join(', ')}
                                </div>
                            </div>
                            <div class="manga-item-actions">
                                <button class="btn btn-secondary" onclick="editManga('${item.id}')">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                                <button class="btn btn-success" onclick="addEpisode('${item.id}')">–î–æ–±–∞–≤–∏—Ç—å —Å–µ—Ä–∏—é</button>
                                <button class="btn btn-danger" onclick="deleteManga('${item.id}')">–£–¥–∞–ª–∏—Ç—å</button>
                            </div>
                        </div>
                    `).join('')}
                </div>
            `;
        } catch (error) {
            content.innerHTML = `<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}</div>`;
        }
    }

    // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–µ—Ä–∏–∏ –∫ —Ç–∞–π—Ç–ª—É
    async function addEpisode(mangaId) {
        const episodeNumber = prompt('–ù–æ–º–µ—Ä –Ω–æ–≤–æ–π —Å–µ—Ä–∏–∏:');
        if (!episodeNumber || isNaN(episodeNumber)) return;

        try {
            // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–∏–π
            const { error } = await window.supabase
                .from('manga')
                .update({ 
                    available_episodes: parseInt(episodeNumber),
                    updated_at: new Date().toISOString()
                })
                .eq('id', mangaId);

            if (error) throw error;

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
            if (window.NotificationSystem) {
                await window.NotificationSystem.createEpisodeNotification(mangaId, parseInt(episodeNumber));
            }

            showNotification(`–°–µ—Ä–∏—è ${episodeNumber} –¥–æ–±–∞–≤–ª–µ–Ω–∞! –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.`, 'success');
            loadMangaManagement();
        } catch (error) {
            showNotification('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–µ—Ä–∏–∏: ' + error.message, 'error');
        }
    }

    // –ü–æ–∫–∞–∑ —Ñ–æ—Ä–º—ã –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏
    function showAddNewsForm() {
        const content = document.getElementById('news-content');
        content.innerHTML = `
            <div class="form-container">
                <h3>–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å</h3>
                <form id="addNewsForm" class="form-grid">
                    <div class="form-group">
                        <label class="form-label">–ó–∞–≥–æ–ª–æ–≤–æ–∫</label>
                        <input type="text" class="form-input" id="newsTitle" required>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ</label>
                        <textarea class="form-textarea" id="newsExcerpt" rows="3" required></textarea>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">–ü–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç</label>
                        <textarea class="form-textarea" id="newsContent" rows="6"></textarea>
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (URL)</label>
                        <input type="url" class="form-input" id="newsImage" placeholder="https://images.pexels.com/photos/1591056/pexels-photo-1591056.jpeg">
                    </div>
                    
                    <div class="form-group">
                        <label class="form-label">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                        <select class="form-select" id="newsCategory">
                            <option value="–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ">–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ</option>
                            <option value="–ö–∞—Ç–∞–ª–æ–≥">–ö–∞—Ç–∞–ª–æ–≥</option>
                            <option value="–§—É–Ω–∫—Ü–∏–∏">–§—É–Ω–∫—Ü–∏–∏</option>
                            <option value="–ê–Ω–æ–Ω—Å">–ê–Ω–æ–Ω—Å</option>
                            <option value="–ü–æ–¥–ø–∏—Å–∫–∏">–ü–æ–¥–ø–∏—Å–∫–∏</option>
                        </select>
                    </div>
                    
                    <div class="form-actions" style="grid-column: 1 / -1;">
                        <button type="submit" class="btn btn-primary">–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å</button>
                        <button type="button" class="btn btn-secondary" onclick="loadNewsManagement()">–û—Ç–º–µ–Ω–∞</button>
                    </div>
                </form>
            </div>
        `;

        document.getElementById('addNewsForm').addEventListener('submit', handleAddNews);
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏
    async function handleAddNews(e) {
        e.preventDefault();
        
        const formData = {
            title: document.getElementById('newsTitle').value,
            excerpt: document.getElementById('newsExcerpt').value,
            content: document.getElementById('newsContent').value || document.getElementById('newsExcerpt').value,
            image_url: document.getElementById('newsImage').value || null,
            category: document.getElementById('newsCategory').value
        };

        try {
            const { error } = await window.supabase
                .from('news')
                .insert(formData);

            if (error) throw error;

            showNotification('–ù–æ–≤–æ—Å—Ç—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞!', 'success');
            loadNewsManagement();
        } catch (error) {
            showNotification('–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: ' + error.message, 'error');
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç—è–º–∏
    async function loadNewsManagement() {
        const content = document.getElementById('news-content');
        if (!content) return;

        try {
            const { data: news, error } = await window.supabase
                .from('news')
                .select('*')
                .order('created_at', { ascending: false });

            if (error && error.code !== 'PGRST116') throw error;

            const newsData = news || [];

            content.innerHTML = `
                <div class="news-list">
                    ${newsData.map(item => `
                        <div class="news-item">
                            <div class="news-item-header">
                                ${item.image_url ? `<img src="${item.image_url}" alt="${item.title}" class="news-item-image">` : ''}
                                <div class="news-item-info">
                                    <div class="news-item-title">${item.title}</div>
                                    <div class="news-item-meta">
                                        <span class="news-category">${item.category}</span>
                                        <span>${new Date(item.created_at).toLocaleDateString('ru-RU')}</span>
                                    </div>
                                    <div class="news-item-excerpt">${item.excerpt}</div>
                                </div>
                            </div>
                            <div class="news-item-actions">
                                <button class="btn btn-secondary" onclick="editNews('${item.id}')">–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å</button>
                                <button class="btn btn-danger" onclick="deleteNews('${item.id}')">–£–¥–∞–ª–∏—Ç—å</button>
                            </div>
                        </div>
                    `).join('')}
                </div>
            `;
        } catch (error) {
            content.innerHTML = `<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}</div>`;
        }
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏
    async function deleteNews(newsId) {
        if (!confirm('–£–¥–∞–ª–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å?')) return;

        try {
            const { error } = await window.supabase
                .from('news')
                .delete()
                .eq('id', newsId);

            if (error) throw error;

            showNotification('–ù–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞', 'success');
            loadNewsManagement();
        } catch (error) {
            showNotification('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: ' + error.message, 'error');
        }
    }

    // –ó–∞–≥—Ä—É–∑–∫–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏
    async function loadUsersManagement() {
        const content = document.getElementById('users-content');
        if (!content) return;

        try {
            const { data: users, error } = await window.supabase
                .from('users')
                .select('*')
                .order('created_at', { ascending: false });

            if (error) throw error;

            content.innerHTML = `
                <div class="users-stats">
                    <div class="stats-row">
                        <span>–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${users.length}</span>
                        <span>–ê–∫—Ç–∏–≤–Ω—ã—Ö: ${users.filter(u => !u.is_banned).length}</span>
                        <span>–ê–¥–º–∏–Ω–æ–≤: ${users.filter(u => u.is_admin).length}</span>
                    </div>
                </div>

                <div class="users-list">
                    ${users.map(user => `
                        <div class="user-item">
                            <div class="user-item-header">
                                <div class="user-avatar-small">${user.username.charAt(0).toUpperCase()}</div>
                                <div class="user-info">
                                    <div class="user-name">${user.username}</div>
                                    <div class="user-email">${user.email}</div>
                                    <div class="user-meta">
                                        –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: ${new Date(user.created_at).toLocaleDateString('ru-RU')} ‚Ä¢ 
                                        –î–æ–Ω–∞—Ç–æ–≤: ${(user.total_donations / 100)}‚ÇΩ ‚Ä¢ 
                                        –ü–æ–¥–ø–∏—Å–∫–∞: ${user.subscription_tier}
                                    </div>
                                </div>
                                <div class="user-status">
                                    <div class="status-badge ${user.is_admin ? 'admin' : 'user'}">${user.is_admin ? '–ê–¥–º–∏–Ω' : '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}</div>
                                </div>
                            </div>
                        </div>
                    `).join('')}
                </div>
            `;
        } catch (error) {
            content.innerHTML = `<div class="error">–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: ${error.message}</div>`;
        }
    }

    // –í—ã—Ö–æ–¥ –∏–∑ –∞–¥–º–∏–Ω–∫–∏
    async function adminLogout() {
        try {
            await window.supabase.auth.signOut();
            window.location.href = 'index.html';
        } catch (error) {
            console.error('Logout error:', error);
        }
    }

    // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    function showNotification(message, type = 'success') {
        let notification = document.getElementById('notification');
        if (!notification) return;

        const colors = {
            success: '#059669',
            error: '#dc2626',
            warning: '#d97706'
        };

        notification.style.background = colors[type] || colors.success;
        notification.textContent = message;
        notification.classList.add('show');

        setTimeout(() => {
            notification.classList.remove('show');
        }, 3000);
    }

    // –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π
    window.switchSection = switchSection;
    window.adminLogout = adminLogout;
    window.showAddMangaForm = showAddMangaForm;
    window.showAddNewsForm = showAddNewsForm;
    window.handleAddManga = handleAddManga;
    window.handleAddNews = handleAddNews;
    window.deleteNews = deleteNews;
    window.addEpisode = addEpisode;
    window.loadMangaManagement = loadMangaManagement;
    window.loadNewsManagement = loadNewsManagement;
    window.loadUsersManagement = loadUsersManagement;

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    document.addEventListener('DOMContentLoaded', async function() {
        // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase
        await waitForSupabase();
        
        const hasAccess = await checkAdminAccess();
        if (hasAccess) {
            initializeAdminPanel();
        }
    });

    console.log('üîß –ê–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞');

})();