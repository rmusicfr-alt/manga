// –°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–≤–µ—Ä–æ–º
(function() {
    'use strict';

    class ServerOptimization {
        constructor() {
            this.imageCache = new Map();
            this.dataCache = new Map();
            this.compressionEnabled = true;
            this.lazyLoadingEnabled = true;
            this.initializeOptimizations();
        }

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–π
        initializeOptimizations() {
            this.setupImageOptimization();
            this.setupDataCompression();
            this.setupLazyLoading();
            this.setupCaching();
            console.log('üöÄ –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞');
        }

        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        setupImageOptimization() {
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
            document.addEventListener('change', (e) => {
                if (e.target.type === 'file' && e.target.accept?.includes('image')) {
                    this.compressImage(e.target.files[0])
                        .then(compressed => {
                            // –ó–∞–º–µ–Ω—è–µ–º —Ñ–∞–π–ª —Å–∂–∞—Ç—ã–º
                            const dt = new DataTransfer();
                            dt.items.add(compressed);
                            e.target.files = dt.files;
                        })
                        .catch(console.error);
                }
            });

            // –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
            this.setupImageLazyLoading();
        }

        // –°–∂–∞—Ç–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        compressImage(file, maxWidth = 800, maxHeight = 1200, quality = 0.8) {
            return new Promise((resolve, reject) => {
                if (!file || !file.type.startsWith('image/')) {
                    reject(new Error('–ù–µ —è–≤–ª—è–µ—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º'));
                    return;
                }

                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                const img = new Image();

                img.onload = () => {
                    // –í—ã—á–∏—Å–ª—è–µ–º –Ω–æ–≤—ã–µ —Ä–∞–∑–º–µ—Ä—ã
                    let { width, height } = img;
                    
                    if (width > maxWidth) {
                        height = (height * maxWidth) / width;
                        width = maxWidth;
                    }
                    
                    if (height > maxHeight) {
                        width = (width * maxHeight) / height;
                        height = maxHeight;
                    }

                    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã canvas
                    canvas.width = width;
                    canvas.height = height;

                    // –†–∏—Å—É–µ–º —Å–∂–∞—Ç–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
                    ctx.drawImage(img, 0, 0, width, height);

                    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ blob
                    canvas.toBlob(
                        (blob) => {
                            const compressedFile = new File([blob], file.name, {
                                type: 'image/jpeg',
                                lastModified: Date.now()
                            });
                            resolve(compressedFile);
                        },
                        'image/jpeg',
                        quality
                    );
                };

                img.onerror = () => reject(new Error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'));
                img.src = URL.createObjectURL(file);
            });
        }

        // –õ–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        setupImageLazyLoading() {
            if ('IntersectionObserver' in window) {
                const imageObserver = new IntersectionObserver((entries) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            const img = entry.target;
                            if (img.dataset.src) {
                                img.src = img.dataset.src;
                                img.removeAttribute('data-src');
                                imageObserver.unobserve(img);
                            }
                        }
                    });
                });

                // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –≤—Å–µ–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏ —Å data-src
                document.addEventListener('DOMContentLoaded', () => {
                    document.querySelectorAll('img[data-src]').forEach(img => {
                        imageObserver.observe(img);
                    });
                });

                // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –¥–æ–±–∞–≤–ª—è–µ–º—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
                const mutationObserver = new MutationObserver((mutations) => {
                    mutations.forEach(mutation => {
                        mutation.addedNodes.forEach(node => {
                            if (node.nodeType === 1) {
                                const lazyImages = node.querySelectorAll ? 
                                    node.querySelectorAll('img[data-src]') : [];
                                lazyImages.forEach(img => imageObserver.observe(img));
                            }
                        });
                    });
                });

                mutationObserver.observe(document.body, {
                    childList: true,
                    subtree: true
                });
            }
        }

        // –°–∂–∞—Ç–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è localStorage
        setupDataCompression() {
            // –ü—Ä–æ—Å—Ç–æ–µ —Å–∂–∞—Ç–∏–µ JSON –¥–∞–Ω–Ω—ã—Ö
            this.compressData = (data) => {
                try {
                    const jsonString = JSON.stringify(data);
                    // –ü—Ä–æ—Å—Ç–æ–µ —Å–∂–∞—Ç–∏–µ: —É–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ —Å–æ–∫—Ä–∞—â–∞–µ–º –∫–ª—é—á–∏
                    return jsonString.replace(/\s+/g, ' ').trim();
                } catch (e) {
                    return data;
                }
            };

            this.decompressData = (compressedData) => {
                try {
                    return JSON.parse(compressedData);
                } catch (e) {
                    return compressedData;
                }
            };
        }

        // –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        setupCaching() {
            // –ö—ç—à –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            this.getCachedData = (key, fetchFunction, ttl = 300000) => { // 5 –º–∏–Ω—É—Ç TTL
                const cached = this.dataCache.get(key);
                const now = Date.now();

                if (cached && (now - cached.timestamp) < ttl) {
                    return cached.data;
                }

                const data = fetchFunction();
                this.dataCache.set(key, {
                    data: data,
                    timestamp: now
                });

                return data;
            };

            // –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä–æ–≥–æ –∫—ç—à–∞
            setInterval(() => {
                const now = Date.now();
                for (const [key, value] of this.dataCache.entries()) {
                    if (now - value.timestamp > 600000) { // 10 –º–∏–Ω—É—Ç
                        this.dataCache.delete(key);
                    }
                }
            }, 300000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
        }

        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        optimizeImageUrl(url, width = 300, height = 450) {
            if (!url) return null;

            // –ï—Å–ª–∏ —ç—Ç–æ placeholder, –æ–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä
            if (url.includes('placeholder.com')) {
                return url.replace(/\/\d+x\d+\//, `/${width}x${height}/`);
            }

            // –î–ª—è –≤–Ω–µ—à–Ω–∏—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∂–∞—Ç–∏—è
            if (url.includes('pexels.com') || url.includes('unsplash.com')) {
                const separator = url.includes('?') ? '&' : '?';
                return `${url}${separator}w=${width}&h=${height}&fit=crop&auto=compress`;
            }

            return url;
        }

        // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∑–∫–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
        preloadCriticalResources() {
            const criticalImages = [
                // –õ–æ–≥–æ—Ç–∏–ø—ã, –∏–∫–æ–Ω–∫–∏ –∏ –¥—Ä—É–≥–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            ];

            criticalImages.forEach(url => {
                const link = document.createElement('link');
                link.rel = 'preload';
                link.as = 'image';
                link.href = url;
                document.head.appendChild(link);
            });
        }

        // –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è localStorage
        optimizeLocalStorage() {
            // –°–∂–∏–º–∞–µ–º –±–æ–ª—å—à–∏–µ –æ–±—ä–µ–∫—Ç—ã –¥–∞–Ω–Ω—ã—Ö
            const largeKeys = ['lightfox_manga_data', 'lightfox_users', 'lightfox_donation_projects'];
            
            largeKeys.forEach(key => {
                const data = localStorage.getItem(key);
                if (data && data.length > 10000) { // –ë–æ–ª—å—à–µ 10KB
                    try {
                        const parsed = JSON.parse(data);
                        const compressed = this.compressData(parsed);
                        if (compressed.length < data.length) {
                            localStorage.setItem(key + '_compressed', compressed);
                            console.log(`üì¶ –°–∂–∞—Ç–æ ${key}: ${data.length} ‚Üí ${compressed.length} –±–∞–π—Ç`);
                        }
                    } catch (e) {
                        console.warn('–û—à–∏–±–∫–∞ —Å–∂–∞—Ç–∏—è –¥–∞–Ω–Ω—ã—Ö:', e);
                    }
                }
            });
        }

        // –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        monitorPerformance() {
            // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å—Ç—Ä–∞–Ω–∏—Ü
            window.addEventListener('load', () => {
                const loadTime = performance.now();
                console.log(`‚ö° –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∑–∞ ${loadTime.toFixed(2)}ms`);
                
                // –ï—Å–ª–∏ –∑–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–ª–µ–Ω–Ω–∞—è, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
                if (loadTime > 3000) {
                    console.warn('‚ö†Ô∏è –ú–µ–¥–ª–µ–Ω–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è.');
                }
            });

            // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏
            if ('memory' in performance) {
                setInterval(() => {
                    const memory = performance.memory;
                    const usedMB = Math.round(memory.usedJSHeapSize / 1048576);
                    const limitMB = Math.round(memory.jsHeapSizeLimit / 1048576);
                    
                    if (usedMB > limitMB * 0.8) {
                        console.warn(`üß† –í—ã—Å–æ–∫–æ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏: ${usedMB}MB / ${limitMB}MB`);
                        this.cleanupMemory();
                    }
                }, 60000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
            }
        }

        // –û—á–∏—Å—Ç–∫–∞ –ø–∞–º—è—Ç–∏
        cleanupMemory() {
            // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∫—ç—à–∏
            this.imageCache.clear();
            this.dataCache.clear();
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–±–æ—Ä–∫–∞ –º—É—Å–æ—Ä–∞ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞)
            if (window.gc) {
                window.gc();
            }
            
            console.log('üßπ –ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞');
        }

        // –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞
        prepareForServerDeployment() {
            console.log('üåê –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä...');
            
            // –û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ–º localStorage
            this.optimizeLocalStorage();
            
            // –ü—Ä–µ–¥–∑–∞–≥—Ä—É–∂–∞–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ—Å—É—Ä—Å—ã
            this.preloadCriticalResources();
            
            // –í–∫–ª—é—á–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
            this.monitorPerformance();
            
            console.log('‚úÖ –°–∞–π—Ç –≥–æ—Ç–æ–≤ –∫ –¥–µ–ø–ª–æ—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä!');
        }
    }

    // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
    window.ServerOptimization = new ServerOptimization();

    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
    document.addEventListener('DOMContentLoaded', () => {
        window.ServerOptimization.prepareForServerDeployment();
    });

    console.log('üöÄ –°–∏—Å—Ç–µ–º–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞');

})();