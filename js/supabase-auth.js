// –ó–∞–º–µ–Ω–∞ —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ Supabase Auth
(function() {
    'use strict';

    class SupabaseAuthSystem {
        constructor() {
            this.currentUser = null;
            this.initializeAuth();
        }

        async initializeAuth() {
            if (!window.supabase) {
                console.error('‚ùå Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                return;
            }

            // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            window.supabase.auth.onAuthStateChange((event, session) => {
                this.handleAuthChange(event, session);
            });

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await this.getCurrentUser();
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        async handleAuthChange(event, session) {
            if (event === 'SIGNED_IN' && session) {
                await this.loadUserProfile(session.user);
                this.updateLegacyStorage();
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏–∏
                if (typeof window.updateAuthState === 'function') {
                    window.updateAuthState();
                }
            } else if (event === 'SIGNED_OUT') {
                this.currentUser = null;
                this.clearLegacyStorage();
                
                if (typeof window.updateAuthState === 'function') {
                    window.updateAuthState();
                }
            }
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async loadUserProfile(user) {
            try {
                const { data: profile, error } = await window.supabase
                    .from('users')
                    .select('*')
                    .eq('id', user.id)
                    .single();

                if (error) {
                    console.error('Profile load error:', error);
                    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    await this.createUserProfile(user);
                    return;
                }

                this.currentUser = { ...user, profile };
            } catch (error) {
                console.error('Load user profile error:', error);
            }
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async createUserProfile(user) {
            try {
                const { data, error } = await window.supabase
                    .from('users')
                    .insert({
                        id: user.id,
                        email: user.email,
                        username: user.user_metadata?.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
                    })
                    .select()
                    .single();

                if (error) throw error;

                this.currentUser = { ...user, profile: data };
            } catch (error) {
                console.error('Create user profile error:', error);
            }
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async getCurrentUser() {
            try {
                const { data: { user } } = await window.supabase.auth.getUser();
                
                if (user) {
                    await this.loadUserProfile(user);
                }
            } catch (error) {
                console.error('Get current user error:', error);
            }
        }

        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
        async register(email, password, username) {
            try {
                const { data, error } = await window.supabase.auth.signUp({
                    email,
                    password,
                    options: {
                        data: {
                            username: username
                        }
                    }
                });

                if (error) throw error;

                return data;
            } catch (error) {
                console.error('Registration error:', error);
                throw error;
            }
        }

        // –í—Ö–æ–¥
        async login(email, password) {
            try {
                const { data, error } = await window.supabase.auth.signInWithPassword({
                    email,
                    password
                });

                if (error) throw error;

                return data;
            } catch (error) {
                console.error('Login error:', error);
                throw error;
            }
        }

        // –í—ã—Ö–æ–¥
        async logout() {
            try {
                const { error } = await window.supabase.auth.signOut();
                if (error) throw error;
            } catch (error) {
                console.error('Logout error:', error);
                throw error;
            }
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        async updateProfile(updates) {
            try {
                const { data: { user } } = await window.supabase.auth.getUser();
                
                if (!user) throw new Error('User not authenticated');

                const { data, error } = await window.supabase
                    .from('users')
                    .update(updates)
                    .eq('id', user.id)
                    .select()
                    .single();

                if (error) throw error;

                // –û–±–Ω–æ–≤–ª—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                if (this.currentUser) {
                    this.currentUser.profile = data;
                }

                this.updateLegacyStorage();
                return data;
            } catch (error) {
                console.error('Update profile error:', error);
                throw error;
            }
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ –∞–≤–∞—Ç–∞—Ä–∞
        async uploadAvatar(file) {
            try {
                const { data: { user } } = await window.supabase.auth.getUser();
                
                if (!user) throw new Error('User not authenticated');

                const fileExt = file.name.split('.').pop();
                const fileName = `${user.id}-${Date.now()}.${fileExt}`;
                const filePath = `avatars/${fileName}`;

                const { error: uploadError } = await window.supabase.storage
                    .from('avatars')
                    .upload(filePath, file);

                if (uploadError) throw uploadError;

                const { data } = window.supabase.storage
                    .from('avatars')
                    .getPublicUrl(filePath);

                // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –Ω–æ–≤—ã–º –∞–≤–∞—Ç–∞—Ä–æ–º
                await this.updateProfile({ avatar_url: data.publicUrl });

                return data.publicUrl;
            } catch (error) {
                console.error('Avatar upload error:', error);
                throw error;
            }
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        isAuthenticated() {
            return !!this.currentUser;
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        getUser() {
            return this.currentUser;
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–æ–π
        updateLegacyStorage() {
            if (this.currentUser) {
                localStorage.setItem('isLoggedIn', 'true');
                localStorage.setItem('currentUser', JSON.stringify({
                    id: this.currentUser.id,
                    name: this.currentUser.profile?.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                    username: this.currentUser.profile?.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                    email: this.currentUser.email
                }));
            }
        }

        // –û—á–∏—Å—Ç–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        clearLegacyStorage() {
            localStorage.removeItem('isLoggedIn');
            localStorage.removeItem('currentUser');
        }
    }

    // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase
    function waitForSupabase() {
        if (window.supabase) {
            window.SupabaseAuthSystem = new SupabaseAuthSystem();
            console.log('üîê Supabase Auth System –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        } else {
            setTimeout(waitForSupabase, 100);
        }
    }

    waitForSupabase();

})();