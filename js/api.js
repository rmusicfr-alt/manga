// API –∫–ª–∏–µ–Ω—Ç –¥–ª—è Light Fox Manga
class LightFoxAPI {
    constructor() {
        this.baseURL = (window.location.origin || 'http://localhost:3000') + '/api';
        this.token = localStorage.getItem('auth_token');
        this.refreshPromise = null;
    }

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–æ–∫–µ–Ω–∞
    setToken(token) {
        this.token = token;
        if (token) {
            localStorage.setItem('auth_token', token);
        } else {
            localStorage.removeItem('auth_token');
        }
    }

    // –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
    getHeaders() {
        const headers = {
            'Content-Type': 'application/json',
            'X-Requested-With': 'XMLHttpRequest'
        };

        if (this.token) {
            headers['Authorization'] = `Bearer ${this.token}`;
        }

        return headers;
    }

    // –ë–∞–∑–æ–≤—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∑–∞–ø—Ä–æ—Å–æ–≤
    async request(endpoint, options = {}) {
        const url = `${this.baseURL}${endpoint}`;
        const config = {
            headers: this.getHeaders(),
            ...options
        };

        try {
            const response = await fetch(url, config);
            const data = await response.json();
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
            if (response.status === 401) {
                // –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω
                this.setToken(null);
                throw new Error('–°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –í–æ–π–¥–∏—Ç–µ –≤ —Å–∏—Å—Ç–µ–º—É –∑–∞–Ω–æ–≤–æ.');
            }
            

            if (!response.ok) {
                throw new Error(data.error || `HTTP ${response.status}`);
            }

            return data;
        } catch (error) {
            console.error(`üö® API Error (${endpoint}):`, error.message);
            
            // –ï—Å–ª–∏ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–æ–ª–µ–µ –ø–æ–Ω—è—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            if (error.name === 'TypeError' && error.message.includes('fetch')) {
                throw new Error('–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
            }
            
            throw error;
        }
    }

    // === –ê–£–¢–ï–ù–¢–ò–§–ò–ö–ê–¶–ò–Ø ===

    async register(userData) {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
        if (!userData.username || userData.username.length < 2) {
            throw new Error('–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞');
        }
        
        if (!userData.email || !this.isValidEmail(userData.email)) {
            throw new Error('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
        }
        
        if (!userData.password || userData.password.length < 6) {
            throw new Error('–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤');
        }
        
        const response = await this.request('/auth/register', {
            method: 'POST',
            body: JSON.stringify(userData)
        });

        if (response.token) {
            this.setToken(response.token);
        }

        return response;
    }

    async login(credentials) {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
        if (!credentials.email || !this.isValidEmail(credentials.email)) {
            throw new Error('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email');
        }
        
        if (!credentials.password) {
            throw new Error('–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å');
        }
        
        const response = await this.request('/auth/login', {
            method: 'POST',
            body: JSON.stringify(credentials)
        });

        if (response.token) {
            this.setToken(response.token);
        }

        return response;
    }

    async logout() {
        try {
            await this.request('/auth/logout', { method: 'POST' });
        } finally {
            this.setToken(null);
        }
    }

    async verifyToken() {
        try {
            return await this.request('/auth/verify');
        } catch (error) {
            this.setToken(null);
            throw error;
        }
    }

    // === –ú–ê–ù–ì–ê ===

    async getAllManga(filters = {}) {
        const params = new URLSearchParams();
        
        Object.keys(filters).forEach(key => {
            if (filters[key] !== undefined && filters[key] !== '') {
                if (Array.isArray(filters[key])) {
                    params.append(key, filters[key].join(','));
                } else {
                    params.append(key, filters[key]);
                }
            }
        });

        const queryString = params.toString();
        const endpoint = `/manga${queryString ? '?' + queryString : ''}`;
        
        const response = await this.request(endpoint);
        return response.manga || [];
    }

    async getMangaById(id) {
        if (!id) {
            throw new Error('ID –º–∞–Ω–≥–∏ –Ω–µ —É–∫–∞–∑–∞–Ω');
        }
        return await this.request(`/manga/${id}`);
    }

    async getGenres() {
        return await this.request('/manga/meta/genres');
    }

    async getCategories() {
        return await this.request('/manga/meta/categories');
    }

    async getStatuses() {
        return await this.request('/manga/meta/statuses');
    }

    async getStats() {
        return await this.request('/manga/meta/stats');
    }

    async getRandomManga() {
        return await this.request('/manga/random');
    }

    // === –ê–î–ú–ò–ù–ö–ê ===

    async saveManga(mangaData) {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
        if (!mangaData.title || !mangaData.title.trim()) {
            throw new Error('–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–π—Ç–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
        }
        
        if (!mangaData.type) {
            throw new Error('–¢–∏–ø —Ç–∞–π—Ç–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
        }
        
        if (!mangaData.status) {
            throw new Error('–°—Ç–∞—Ç—É—Å —Ç–∞–π—Ç–ª–∞ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω');
        }
        
        return await this.request('/admin/manga', {
            method: 'POST',
            body: JSON.stringify(mangaData)
        });
    }

    async deleteManga(id) {
        if (!id) {
            throw new Error('ID –º–∞–Ω–≥–∏ –Ω–µ —É–∫–∞–∑–∞–Ω');
        }
        
        if (!confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —Ç–∞–π—Ç–ª?')) {
            throw new Error('–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ');
        }
        
        return await this.request(`/admin/manga/${id}`, {
            method: 'DELETE'
        });
    }

    async getDashboardStats() {
        return await this.request('/admin/dashboard/stats');
    }

    // === –î–û–ù–ê–¢-–ü–†–û–ï–ö–¢–´ ===

    async getDonationProjects() {
        return await this.request('/donations/projects');
    }

    async saveDonationProject(projectData) {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!projectData.manga_id) {
            throw new Error('–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞–π—Ç–ª –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞');
        }
        
        if (!projectData.title || !projectData.title.trim()) {
            throw new Error('–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ');
        }
        
        if (!projectData.goal_amount || projectData.goal_amount < 1000) {
            throw new Error('–¶–µ–ª—å –¥–æ–Ω–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 1000‚ÇΩ');
        }
        
        return await this.request('/admin/donation-projects', {
            method: 'POST',
            body: JSON.stringify(projectData)
        });
    }

    async deleteDonationProject(id) {
        if (!id) {
            throw new Error('ID –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
        }
        
        return await this.request(`/admin/donation-projects/${id}`, {
            method: 'DELETE'
        });
    }

    async updateDonationAmount(projectId, amount) {
        if (!projectId) {
            throw new Error('ID –ø—Ä–æ–µ–∫—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
        }
        
        if (!amount || amount < 0) {
            throw new Error('–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π');
        }
        
        return await this.request(`/admin/donation-projects/${projectId}/amount`, {
            method: 'PATCH',
            body: JSON.stringify({ amount })
        });
    }

    // === –î–û–ù–ê–¢–´ ===

    async makeDonation(donationData) {
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!donationData.amount || donationData.amount < 10) {
            throw new Error('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–æ–Ω–∞—Ç–∞: 10‚ÇΩ');
        }
        
        if (donationData.amount > 50000) {
            throw new Error('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–æ–Ω–∞—Ç–∞: 50,000‚ÇΩ');
        }
        
        if (!donationData.project_id && !donationData.manga_id) {
            throw new Error('–£–∫–∞–∂–∏—Ç–µ –ø—Ä–æ–µ–∫—Ç –∏–ª–∏ –º–∞–Ω–≥—É –¥–ª—è –¥–æ–Ω–∞—Ç–∞');
        }
        
        return await this.request('/donations/donate', {
            method: 'POST',
            body: JSON.stringify(donationData)
        });
    }

    async getDonationHistory() {
        return await this.request('/donations/history');
    }

    async getDonationStats() {
        return await this.request('/donations/stats');
    }

    // === –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨–°–ö–ò–ï –°–ü–ò–°–ö–ò ===

    async getUserLists() {
        return await this.request('/users/lists');
    }

    async addToList(mangaId, listType, currentEpisode = 1) {
        if (!mangaId) {
            throw new Error('ID –º–∞–Ω–≥–∏ –Ω–µ —É–∫–∞–∑–∞–Ω');
        }
        
        if (!['favorites', 'watching', 'wantToWatch', 'completed'].includes(listType)) {
            throw new Error('–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø —Å–ø–∏—Å–∫–∞');
        }
        
        return await this.request('/users/lists', {
            method: 'POST',
            body: JSON.stringify({
                manga_id: mangaId,
                list_type: listType,
                current_episode: currentEpisode
            })
        });
    }

    async removeFromList(mangaId, listType) {
        if (!mangaId || !listType) {
            throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');
        }
        
        return await this.request(`/users/lists/${mangaId}/${listType}`, {
            method: 'DELETE'
        });
    }

    async updateProgress(mangaId, episodeNumber, progressSeconds = 0, completed = false) {
        if (!mangaId || !episodeNumber) {
            throw new Error('–ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã');
        }
        
        return await this.request('/users/progress', {
            method: 'POST',
            body: JSON.stringify({
                manga_id: mangaId,
                episode_number: episodeNumber,
                progress_seconds: progressSeconds,
                completed
            })
        });
    }

    async getProgress(mangaId) {
        if (!mangaId) {
            throw new Error('ID –º–∞–Ω–≥–∏ –Ω–µ —É–∫–∞–∑–∞–Ω');
        }
        
        return await this.request(`/users/progress/${mangaId}`);
    }

    async getUserProfile() {
        return await this.request('/users/profile');
    }

    async updateProfile(profileData) {
        return await this.request('/users/profile', {
            method: 'PATCH',
            body: JSON.stringify(profileData)
        });
    }

    // === –£–¢–ò–õ–ò–¢–´ ===

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
    isAuthenticated() {
        return !!this.token;
    }

    // –í–∞–ª–∏–¥–∞—Ü–∏—è email
    isValidEmail(email) {
        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
        return emailRegex.test(email);
    }

    // –û—á–∏—Å—Ç–∫–∞ HTML –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    sanitizeHtml(html) {
        const div = document.createElement('div');
        div.textContent = html;
        return div.innerHTML;
    }
    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –º–∞–Ω–≥–∏ (–∫–ª–∏–µ–Ω—Ç—Å–∫–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
    filterManga(manga, filters = {}) {
        let result = [...manga];

        if (filters.search) {
            const searchTerm = filters.search.toLowerCase();
            result = result.filter(item => 
                item.title && item.title.toLowerCase().includes(searchTerm)
            );
        }

        if (filters.genres && filters.genres.length > 0) {
            result = result.filter(item => 
                item.genres && filters.genres.some(genre => 
                    item.genres.includes(genre)
                )
            );
        }

        if (filters.categories && filters.categories.length > 0) {
            result = result.filter(item => 
                item.categories && filters.categories.some(category => 
                    item.categories.includes(category)
                )
            );
        }

        if (filters.statuses && filters.statuses.length > 0) {
            result = result.filter(item => 
                item.status && filters.statuses.includes(item.status)
            );
        }

        // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞
        if (filters.sortBy) {
            switch (filters.sortBy) {
                case 'alphabet':
                    result.sort((a, b) => (a.title || '').localeCompare(b.title || ''));
                    break;
                case 'rating':
                    result.sort((a, b) => (b.rating || 0) - (a.rating || 0));
                    break;
                case 'updated':
                    result.sort((a, b) => new Date(b.updated_at || 0) - new Date(a.updated_at || 0));
                    break;
                case 'popularity':
                default:
                    result.sort((a, b) => {
                        const aPopularity = (a.current_donations || 0) + (a.rating || 0) * 1000;
                        const bPopularity = (b.current_donations || 0) + (b.rating || 0) * 1000;
                        return bPopularity - aPopularity;
                    });
                    break;
            }
        }

        return result;
    }
}

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä API
window.LightFoxAPI = new LightFoxAPI();

// –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
window.MangaAPI = {
    getAllManga: async () => {
        try {
            return await window.LightFoxAPI.getAllManga(filters);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–Ω–≥–∏:', error);
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤ –≤–º–µ—Å—Ç–æ –ø–∞–¥–µ–Ω–∏—è
            return [];
        }
    },

    getMangaById: async (id) => {
        try {
            return await window.LightFoxAPI.getMangaById(id);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–∞–Ω–≥–∏ –ø–æ ID:', error);
            return null;
        }
    },

    getGenres: async () => {
        try {
            return await window.LightFoxAPI.getGenres();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∂–∞–Ω—Ä–æ–≤:', error);
            return [];
        }
    },

    getCategories: async () => {
        try {
            return await window.LightFoxAPI.getCategories();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π:', error);
            return [];
        }
    },

    getStatuses: async () => {
        try {
            return await window.LightFoxAPI.getStatuses();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤:', error);
            return [];
        }
    },

    getStats: async () => {
        try {
            return await window.LightFoxAPI.getStats();
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:', error);
            return { totalManga: 0, totalEpisodes: 0, averageRating: 0, totalDonations: 0 };
        }
    },

    filterManga: (manga, filters) => {
        // –î–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–¥–æ–º
        return window.LightFoxAPI.filterManga(manga, filters);
    },

    addManga: async (mangaData) => {
        try {
            return await window.LightFoxAPI.saveManga(mangaData);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞–Ω–≥–∏:', error);
            throw error;
        }
    },

    updateManga: async (id, updates) => {
        try {
            return await window.LightFoxAPI.saveManga({ id, ...updates });
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –º–∞–Ω–≥–∏:', error);
            throw error;
        }
    },

    deleteManga: async (id) => {
        try {
            return await window.LightFoxAPI.deleteManga(id);
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –º–∞–Ω–≥–∏:', error);
            throw error;
        }
    }
};

// –°–∏—Å—Ç–µ–º–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
window.AuthSystem = {
    isAuthenticated: () => window.LightFoxAPI.isAuthenticated(),
    
    getCurrentUser: async () => {
        try {
            if (!window.LightFoxAPI.isAuthenticated()) return null;
            const response = await window.LightFoxAPI.verifyToken();
            return response.user;
        } catch (error) {
            console.warn('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error.message);
            return null;
        }
    },

    login: async (email, password, deviceInfo, rememberMe = false) => {
        const response = await window.LightFoxAPI.login({
            email,
            password,
            rememberMe
        });
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if (response.user) {
            localStorage.setItem('currentUser', JSON.stringify(response.user));
            localStorage.setItem('isLoggedIn', 'true');
        }
        
        return response;
    },

    register: async (userData, deviceInfo) => {
        const response = await window.LightFoxAPI.register(userData);
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if (response.user) {
            localStorage.setItem('currentUser', JSON.stringify(response.user));
            localStorage.setItem('isLoggedIn', 'true');
        }
        
        return response;
    },

    logout: async () => {
        await window.LightFoxAPI.logout();
        
        // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        localStorage.removeItem('currentUser');
        localStorage.removeItem('isLoggedIn');
    }
};

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', async () => {
    if (window.LightFoxAPI.isAuthenticated()) {
        try {
            await window.LightFoxAPI.verifyToken();
        } catch (error) {
            console.warn('–¢–æ–∫–µ–Ω –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –æ—á–∏—â–∞–µ–º —Å–µ—Å—Å–∏—é');
            localStorage.removeItem('currentUser');
            localStorage.removeItem('isLoggedIn');
        }
    }
});
console.log('üåê Light Fox Manga API –∫–ª–∏–µ–Ω—Ç –∑–∞–≥—Ä—É–∂–µ–Ω');