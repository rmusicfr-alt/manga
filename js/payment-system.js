// –°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã –¥–ª—è Light Fox Manga
(function() {
    'use strict';

    class PaymentSystem {
        constructor() {
            this.pendingPayments = this.loadPendingPayments();
            this.paymentHistory = this.loadPaymentHistory();
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        loadPendingPayments() {
            try {
                return JSON.parse(localStorage.getItem('pending_payments') || '[]');
            } catch (e) {
                return [];
            }
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–∂–∏–¥–∞—é—â–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        savePendingPayments() {
            localStorage.setItem('pending_payments', JSON.stringify(this.pendingPayments));
        }

        // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
        loadPaymentHistory() {
            try {
                return JSON.parse(localStorage.getItem('payment_history') || '[]');
            } catch (e) {
                return [];
            }
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π
        savePaymentHistory() {
            localStorage.setItem('payment_history', JSON.stringify(this.paymentHistory));
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –¥–æ–Ω–∞—Ç–∞
        createDonationPayment(mangaId, amount, mangaTitle) {
            const currentUser = JSON.parse(localStorage.getItem('currentUser') || 'null');
            if (!currentUser) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            }

            const payment = {
                id: 'payment_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9),
                type: 'donation',
                userId: currentUser.id,
                mangaId: mangaId,
                mangaTitle: mangaTitle,
                amount: amount,
                currency: window.CurrencySystem ? window.CurrencySystem.getCurrentCurrency().symbol : '‚ÇΩ',
                status: 'pending',
                createdAt: new Date().toISOString(),
                expiresAt: new Date(Date.now() + 15 * 60 * 1000).toISOString() // 15 –º–∏–Ω—É—Ç
            };

            this.pendingPayments.push(payment);
            this.savePendingPayments();

            return payment;
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏
        createSubscriptionPayment(planType, planData) {
            const currentUser = JSON.parse(localStorage.getItem('currentUser') || 'null');
            if (!currentUser) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
            }

            const payment = {
                id: 'payment_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9),
                type: 'subscription',
                userId: currentUser.id,
                planType: planType,
                planName: planData.name,
                amount: planData.price,
                currency: window.CurrencySystem ? window.CurrencySystem.getCurrentCurrency().symbol : '‚ÇΩ',
                status: 'pending',
                createdAt: new Date().toISOString(),
                expiresAt: new Date(Date.now() + 15 * 60 * 1000).toISOString() // 15 –º–∏–Ω—É—Ç
            };

            this.pendingPayments.push(payment);
            this.savePendingPayments();

            return payment;
        }

        // –°–∏–º—É–ª—è—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã
        redirectToPayment(paymentId) {
            const payment = this.pendingPayments.find(p => p.id === paymentId);
            if (!payment) {
                throw new Error('–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }

            // –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É –æ–ø–ª–∞—Ç—ã
            this.showPaymentPage(payment);
        }

        // –ü–æ–∫–∞–∑ —Å—Ç—Ä–∞–Ω–∏—Ü—ã –æ–ø–ª–∞—Ç—ã
        showPaymentPage(payment) {
            const paymentModal = document.createElement('div');
            paymentModal.id = 'paymentModal';
            paymentModal.style.cssText = `
                position: fixed;
                top: 0;
                left: 0;
                width: 100%;
                height: 100%;
                background: rgba(0, 0, 0, 0.8);
                backdrop-filter: blur(5px);
                z-index: 10000;
                display: flex;
                align-items: center;
                justify-content: center;
                padding: 20px;
            `;

            const currencySymbol = payment.currency;
            const displayAmount = payment.amount;

            paymentModal.innerHTML = `
                <div style="
                    background: var(--card-bg);
                    border-radius: 20px;
                    padding: 40px;
                    max-width: 500px;
                    width: 100%;
                    text-align: center;
                    box-shadow: 0 20px 40px rgba(0,0,0,0.3);
                ">
                    <div style="font-size: 4rem; margin-bottom: 20px;">üí≥</div>
                    <h2 style="color: var(--text-color); margin-bottom: 10px;">–û–ø–ª–∞—Ç–∞</h2>
                    <p style="color: var(--secondary-color); margin-bottom: 30px;">
                        ${payment.type === 'donation' ? 
                            `–î–æ–Ω–∞—Ç –¥–ª—è "${payment.mangaTitle}"` : 
                            `–ü–æ–¥–ø–∏—Å–∫–∞ "${payment.planName}"`
                        }
                    </p>
                    
                    <div style="
                        background: var(--bg-color);
                        border-radius: 12px;
                        padding: 20px;
                        margin-bottom: 30px;
                        border: 2px solid var(--primary-color);
                    ">
                        <div style="font-size: 2rem; font-weight: bold; color: var(--primary-color);">
                            ${displayAmount}${currencySymbol}
                        </div>
                        <div style="color: var(--secondary-color); font-size: 0.9rem;">
                            –ö –æ–ø–ª–∞—Ç–µ
                        </div>
                    </div>

                    <div style="
                        background: rgba(16, 185, 129, 0.1);
                        border: 1px solid rgba(16, 185, 129, 0.3);
                        border-radius: 8px;
                        padding: 15px;
                        margin-bottom: 20px;
                        font-size: 0.9rem;
                        color: var(--text-color);
                    ">
                        üîí –≠—Ç–æ –¥–µ–º–æ-–≤–µ—Ä—Å–∏—è. –í —Ä–µ–∞–ª—å–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π.
                    </div>

                    <div style="display: flex; gap: 15px; justify-content: center;">
                        <button onclick="window.PaymentSystem.confirmPayment('${payment.id}')" style="
                            background: var(--primary-color);
                            color: white;
                            border: none;
                            padding: 15px 30px;
                            border-radius: 10px;
                            font-weight: 600;
                            cursor: pointer;
                            transition: all 0.2s;
                        ">
                            ‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É
                        </button>
                        <button onclick="window.PaymentSystem.cancelPayment('${payment.id}')" style="
                            background: var(--border-color);
                            color: var(--secondary-color);
                            border: none;
                            padding: 15px 30px;
                            border-radius: 10px;
                            font-weight: 600;
                            cursor: pointer;
                            transition: all 0.2s;
                        ">
                            ‚ùå –û—Ç–º–µ–Ω–∞
                        </button>
                    </div>

                    <div style="margin-top: 20px; font-size: 0.8rem; color: var(--secondary-color);">
                        –ü–ª–∞—Ç–µ–∂ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç
                    </div>
                </div>
            `;

            document.body.appendChild(paymentModal);

            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –∑–∞–∫—Ä—ã—Ç–∏–µ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç
            setTimeout(() => {
                this.cancelPayment(payment.id);
            }, 15 * 60 * 1000);
        }

        // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞
        confirmPayment(paymentId) {
            const payment = this.pendingPayments.find(p => p.id === paymentId);
            if (!payment) {
                this.showNotification('–ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
                return;
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            payment.status = 'completed';
            payment.completedAt = new Date().toISOString();

            // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–ª–∞—Ç–µ–∂
            if (payment.type === 'donation') {
                this.processDonation(payment);
            } else if (payment.type === 'subscription') {
                this.processSubscription(payment);
            }

            // –ü–µ—Ä–µ–º–µ—â–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
            this.paymentHistory.push(payment);
            this.pendingPayments = this.pendingPayments.filter(p => p.id !== paymentId);
            
            this.savePendingPayments();
            this.savePaymentHistory();

            // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª
            this.closePaymentModal();

            this.showNotification('–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!', 'success');
        }

        // –û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞
        cancelPayment(paymentId) {
            const payment = this.pendingPayments.find(p => p.id === paymentId);
            if (payment) {
                payment.status = 'cancelled';
                payment.cancelledAt = new Date().toISOString();
                
                this.pendingPayments = this.pendingPayments.filter(p => p.id !== paymentId);
                this.savePendingPayments();
            }

            this.closePaymentModal();
            this.showNotification('–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω', 'warning');
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–Ω–∞—Ç–∞
        processDonation(payment) {
            if (!window.supabase) return;

            // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–Ω–∞—Ç –≤ Supabase
            this.updateSupabaseDonation(payment);
        }
        
        async updateSupabaseDonation(payment) {
            try {
                // –°—É–º–º–∞ —É–∂–µ –≤ –∫–æ–ø–µ–π–∫–∞—Ö, –Ω–µ —É–º–Ω–æ–∂–∞–µ–º
                const amountInKopecks = payment.amount;

                const { error } = await window.supabase
                    .from('donations')
                    .insert({
                        user_id: payment.userId,
                        manga_id: payment.mangaId,
                        amount: amountInKopecks,
                        currency: payment.currency,
                        status: 'completed',
                        payment_id: payment.id
                    });

                if (error) throw error;

                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–æ–Ω–∞—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                const donationHistory = JSON.parse(localStorage.getItem('donationHistory') || '[]');
                donationHistory.push({
                    mangaId: payment.mangaId,
                    mangaTitle: payment.mangaTitle,
                    amount: amountInKopecks / 100, // –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –≤ —Ä—É–±–ª—è—Ö
                    originalAmount: payment.amount,
                    currency: payment.currency,
                    timestamp: payment.completedAt,
                    paymentId: payment.id
                });
                localStorage.setItem('donationHistory', JSON.stringify(donationHistory));

                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –¥–æ–Ω–∞—Ç–∞
                window.dispatchEvent(new CustomEvent('donationCompleted', {
                    detail: { 
                        userId: JSON.parse(localStorage.getItem('currentUser') || 'null')?.id,
                        amount: amountInKopecks / 100, 
                        mangaTitle: payment.mangaTitle 
                    }
                }));
                
            } catch (error) {
                console.error('Update Supabase donation error:', error);
            }
        }

        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
        processSubscription(payment) {
            const expiresAt = new Date();
            expiresAt.setMonth(expiresAt.getMonth() + 1); // 1 –º–µ—Å—è—Ü

            const subscription = {
                planType: payment.planType,
                planName: payment.planName,
                tier: payment.planType.charAt(0).toUpperCase() + payment.planType.slice(1),
                price: payment.amount,
                currency: payment.currency,
                activatedAt: payment.completedAt,
                expiresAt: expiresAt.toISOString(),
                paymentId: payment.id
            };

            localStorage.setItem('userSubscription', JSON.stringify(subscription));
        }

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∞ –æ–ø–ª–∞—Ç—ã
        closePaymentModal() {
            const modal = document.getElementById('paymentModal');
            if (modal) {
                modal.remove();
            }
        }

        // –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        showNotification(message, type = 'success') {
            if (window.showNotification) {
                window.showNotification(message, type);
            } else {
                alert(message);
            }
        }

        // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π
        cleanExpiredPayments() {
            const now = new Date();
            this.pendingPayments = this.pendingPayments.filter(payment => {
                return new Date(payment.expiresAt) > now;
            });
            this.savePendingPayments();
        }

        // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ø–ª–∞—Ç–µ–∂–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        getUserPaymentHistory() {
            const currentUser = JSON.parse(localStorage.getItem('currentUser') || 'null');
            if (!currentUser) return [];

            return this.paymentHistory.filter(payment => payment.userId === currentUser.id);
        }
    }

    // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä
    window.PaymentSystem = new PaymentSystem();

    // –ê–≤—Ç–æ–æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–µ–∫—à–∏—Ö –ø–ª–∞—Ç–µ–∂–µ–π
    setInterval(() => {
        window.PaymentSystem.cleanExpiredPayments();
    }, 60000); // –ö–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

    console.log('üí≥ –°–∏—Å—Ç–µ–º–∞ –æ–ø–ª–∞—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω–∞');

})();