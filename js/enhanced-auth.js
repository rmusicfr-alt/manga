// –£–ª—É—á—à–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å Supabase
(function() {
    'use strict';

    class EnhancedAuthSystem {
        constructor() {
            this.currentUser = null;
            this.authListeners = [];
            this.initializeAuth();
        }

        async initializeAuth() {
            if (!window.supabase) {
                console.error('‚ùå Supabase –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                return;
            }

            // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            window.supabase.auth.onAuthStateChange((event, session) => {
                this.handleAuthChange(event, session);
            });

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await this.getCurrentUser();
        }

        async handleAuthChange(event, session) {
            console.log('üîê Auth state changed:', event);

            if (event === 'SIGNED_IN' && session) {
                await this.loadUserProfile(session.user);
                this.updateLegacyStorage();
                this.notifyAuthListeners('login', this.currentUser);
            } else if (event === 'SIGNED_OUT') {
                this.currentUser = null;
                this.clearLegacyStorage();
                this.notifyAuthListeners('logout', null);
            }

            // –û–±–Ω–æ–≤–ª—è–µ–º UI –Ω–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
            if (typeof window.updateAuthState === 'function') {
                window.updateAuthState();
            }
        }

        async loadUserProfile(user) {
            try {
                const { data: profile, error } = await window.supabase
                    .from('users')
                    .select('*')
                    .eq('id', user.id)
                    .single();

                if (error) {
                    // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
                    await this.createUserProfile(user);
                    return;
                }

                this.currentUser = { ...user, profile };
            } catch (error) {
                console.error('Load user profile error:', error);
            }
        }

        async createUserProfile(user) {
            try {
                const { data, error } = await window.supabase
                    .from('users')
                    .insert({
                        id: user.id,
                        email: user.email,
                        username: user.user_metadata?.username || user.email.split('@')[0] || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
                    })
                    .select()
                    .single();

                if (error) throw error;

                this.currentUser = { ...user, profile: data };
                console.log('‚úÖ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞–Ω');
            } catch (error) {
                console.error('Create user profile error:', error);
            }
        }

        async getCurrentUser() {
            try {
                const { data: { user } } = await window.supabase.auth.getUser();
                
                if (user) {
                    await this.loadUserProfile(user);
                }
            } catch (error) {
                console.error('Get current user error:', error);
            }
        }

        // –ë—ã—Å—Ç—Ä–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (–¥–ª—è –¥–µ–º–æ)
        async quickRegister(username, email, password) {
            try {
                const { data, error } = await window.supabase.auth.signUp({
                    email,
                    password,
                    options: {
                        data: {
                            username: username
                        }
                    }
                });

                if (error) throw error;

                console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:', email);
                return data;
            } catch (error) {
                console.error('Registration error:', error);
                throw error;
            }
        }

        // –ë—ã—Å—Ç—Ä—ã–π –≤—Ö–æ–¥ (–¥–ª—è –¥–µ–º–æ)
        async quickLogin(email, password) {
            try {
                const { data, error } = await window.supabase.auth.signInWithPassword({
                    email,
                    password
                });

                if (error) throw error;

                console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ—à–µ–ª:', email);
                return data;
            } catch (error) {
                console.error('Login error:', error);
                throw error;
            }
        }

        async logout() {
            try {
                const { error } = await window.supabase.auth.signOut();
                if (error) throw error;

                console.log('üëã –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã—à–µ–ª');
            } catch (error) {
                console.error('Logout error:', error);
                throw error;
            }
        }

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–æ–π
        updateLegacyStorage() {
            if (this.currentUser) {
                localStorage.setItem('isLoggedIn', 'true');
                localStorage.setItem('currentUser', JSON.stringify({
                    id: this.currentUser.id,
                    name: this.currentUser.profile?.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                    username: this.currentUser.profile?.username || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
                    email: this.currentUser.email
                }));
            }
        }

        clearLegacyStorage() {
            localStorage.removeItem('isLoggedIn');
            localStorage.removeItem('currentUser');
        }

        // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        onAuthChange(callback) {
            this.authListeners.push(callback);
        }

        notifyAuthListeners(event, user) {
            this.authListeners.forEach(callback => {
                try {
                    callback(event, user);
                } catch (error) {
                    console.error('Auth listener error:', error);
                }
            });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        isAuthenticated() {
            return !!this.currentUser;
        }

        getUser() {
            return this.currentUser;
        }

        // –°–æ–∑–¥–∞–Ω–∏–µ –¥–µ–º–æ –∞–¥–º–∏–Ω–∞
        async createDemoAdmin() {
            try {
                const { data, error } = await this.quickRegister(
                    'Admin',
                    'admin@lightfox.com',
                    'admin123'
                );

                if (error) throw error;

                // –î–µ–ª–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–æ–º
                const { error: updateError } = await window.supabase
                    .from('users')
                    .update({ is_admin: true })
                    .eq('id', data.user.id);

                if (updateError) throw updateError;

                console.log('üëë –î–µ–º–æ –∞–¥–º–∏–Ω —Å–æ–∑–¥–∞–Ω: admin@lightfox.com / admin123');
            } catch (error) {
                console.error('Create demo admin error:', error);
            }
        }
    }

    // –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Supabase
    function waitForSupabase() {
        if (window.supabase) {
            window.EnhancedAuthSystem = new EnhancedAuthSystem();
            
            // –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ –∞–¥–º–∏–Ω–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ
            setTimeout(() => {
                window.EnhancedAuthSystem.createDemoAdmin();
            }, 2000);
            
            console.log('üîê Enhanced Auth System –∑–∞–≥—Ä—É–∂–µ–Ω–∞');
        } else {
            setTimeout(waitForSupabase, 100);
        }
    }

    waitForSupabase();

})();