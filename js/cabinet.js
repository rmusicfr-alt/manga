
        // State
        let isDark = localStorage.getItem('theme') === 'dark';
        let isLoggedIn = localStorage.getItem('isLoggedIn') === 'true';
        let currentUser = JSON.parse(localStorage.getItem('currentUser')) || null;
        let currentSection = null;
        let userLists = {
            favorites: [],
            watching: [],
            wantToWatch: [],

            completed: []
        };

        // === –ë–ï–ó–û–ü–ê–°–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–• ===
        function loadDataSystemSafely() {
            return new Promise((resolve) => {
                const script = document.createElement('script');
                script.src = 'js/data.js';
                
                let isResolved = false;
                const timeout = setTimeout(() => {
                    if (!isResolved) {
                        console.warn('‚è∞ –¢–∞–π–º–∞—É—Ç –∑–∞–≥—Ä—É–∑–∫–∏ data.js, —Å–æ–∑–¥–∞—é fallback');
                        createMockMangaAPI();
                        isResolved = true;
                        resolve(false);
                    }
                }, 3000);

                script.onload = () => {
                    if (!isResolved) {
                        clearTimeout(timeout);
                        console.log('‚úÖ data.js –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ');
                        
                        setTimeout(() => {
                            if (window.MangaAPI && typeof window.MangaAPI.getAllManga === 'function') {
                                console.log('üéØ MangaAPI –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
                                isResolved = true;
                                resolve(true);
                            } else {
                                console.warn('‚ö†Ô∏è MangaAPI –Ω–µ –≥–æ—Ç–æ–≤, —Å–æ–∑–¥–∞—é fallback');
                                createMockMangaAPI();
                                isResolved = true;
                                resolve(false);
                            }
                        }, 100);
                    }
                };

                script.onerror = () => {
                    if (!isResolved) {
                        clearTimeout(timeout);
                        console.warn('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ data.js, —Å–æ–∑–¥–∞—é fallback');
                        createMockMangaAPI();
                        isResolved = true;
                        resolve(false);
                    }
                };

                document.head.appendChild(script);
            });
        }

        // === –°–û–ó–î–ê–ù–ò–ï –°–û–í–ú–ï–°–¢–ò–ú–û–ì–û MOCK API ===
        function createMockMangaAPI() {
            console.log('üîß –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–≥–æ Mock API...');
            
            const mockData = [
                {
                    id: '1',
                    title: '–ê—Ç–∞–∫–∞ —Ç–∏—Ç–∞–Ω–æ–≤',
                    type: '–ê–Ω–∏–º–µ',
                    status: '–ó–∞–≤–µ—Ä—à—ë–Ω',
                    year: 2013,
                    rating: 9.0,
                    genres: ['–≠–∫—à–µ–Ω', '–î—Ä–∞–º–∞', '–§—ç–Ω—Ç–µ–∑–∏', '–í–æ–µ–Ω–Ω–æ–µ'],
                    categories: ['–°—ë–Ω–µ–Ω'],
                    availableEpisodes: 87,
                    totalEpisodes: 87,
                    currentDonations: 7500,
                    donationGoal: 10000,
                    image: 'https://via.placeholder.com/300x450/FF6B35/FFFFFF?text=–ê–¢',
                    description: '–ß–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–æ –∂–∏–≤—ë—Ç –≤ –≥–æ—Ä–æ–¥–∞—Ö, –æ–∫—Ä—É–∂—ë–Ω–Ω—ã—Ö –æ–≥—Ä–æ–º–Ω—ã–º–∏ —Å—Ç–µ–Ω–∞–º–∏, –∑–∞—â–∏—â–∞—é—â–∏–º–∏ –æ—Ç —Ç–∏—Ç–∞–Ω–æ–≤.',
                    episodes: {
                        1: 'https://www.youtube.com/embed/dQw4w9WgXcQ',
                        2: 'https://www.youtube.com/embed/dQw4w9WgXcQ'
                    }
                },
                {
                    id: '2',
                    title: '–ù–∞—Ä—É—Ç–æ',
                    type: '–ê–Ω–∏–º–µ',
                    status: '–ó–∞–≤–µ—Ä—à—ë–Ω',
                    year: 2002,
                    rating: 8.7,
                    genres: ['–≠–∫—à–µ–Ω', '–ü—Ä–∏–∫–ª—é—á–µ–Ω–∏—è', '–ë–æ–µ–≤—ã–µ –∏—Å–∫—É—Å—Å—Ç–≤–∞'],
                    categories: ['–°—ë–Ω–µ–Ω'],
                    availableEpisodes: 720,
                    totalEpisodes: 720,
                    currentDonations: 12000,
                    donationGoal: 15000,
                    image: 'https://via.placeholder.com/300x450/4A90E2/FFFFFF?text=–ù',
                    description: '–ò—Å—Ç–æ—Ä–∏—è –º–æ–ª–æ–¥–æ–≥–æ –Ω–∏–Ω–¥–∑—è –ù–∞—Ä—É—Ç–æ –£–∑—É–º–∞–∫–∏.',
                    episodes: {
                        1: 'https://www.youtube.com/embed/dQw4w9WgXcQ'
                    }
                }
            ];

            window.MangaAPI = {
                getAllManga: () => [...mockData],
                getMangaById: (id) => mockData.find(manga => manga.id === String(id)),
                addManga: (manga) => {
                    const newManga = {
                        id: String(Date.now()),
                        currentDonations: 0,
                        donationGoal: 10000,
                        episodes: {},
                        ...manga
                    };
                    mockData.push(newManga);
                    return newManga;
                },
                updateManga: (id, updates) => {
                    const index = mockData.findIndex(manga => manga.id === String(id));
                    if (index !== -1) {
                        mockData[index] = { ...mockData[index], ...updates };
                        try {
                            localStorage.setItem('lightfox_manga_data', JSON.stringify(mockData));
                        } catch (e) {
                            console.warn('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –¥–∞–Ω–Ω—ã–µ:', e);
                        }
                        return mockData[index];
                    }
                    return null;
                },
                deleteManga: (id) => {
                    const index = mockData.findIndex(manga => manga.id === String(id));
                    if (index !== -1) {
                        return mockData.splice(index, 1)[0];
                    }
                    return null;
                },
                getStats: () => ({
                    totalManga: mockData.length,
                    totalEpisodes: mockData.reduce((sum, manga) => sum + (manga.availableEpisodes || 0), 0),
                    averageRating: mockData.reduce((sum, manga) => sum + (manga.rating || 0), 0) / mockData.length,
                    totalDonations: mockData.reduce((sum, manga) => sum + (manga.currentDonations || 0), 0)
                }),
                isReady: true,
                _isMock: true
            };

            console.log('‚úÖ Mock MangaAPI —Å–æ–∑–¥–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é');
            
            setTimeout(() => {
                if (typeof window !== 'undefined') {
                    window.dispatchEvent(new CustomEvent('mangaDataReady', {
                        detail: { api: window.MangaAPI }
                    }));
                }
            }, 100);
        }

        // Theme functionality
        function updateTheme() {
            document.body.setAttribute('data-theme', isDark ? 'dark' : 'light');
            
            const updateIcons = (moonClass, sunClass) => {
                const moonIcons = document.querySelectorAll(moonClass);
                const sunIcons = document.querySelectorAll(sunClass);
                
                moonIcons.forEach(icon => {
                    icon.style.display = isDark ? 'none' : 'block';
                });
                
                sunIcons.forEach(icon => {
                    icon.style.display = isDark ? 'block' : 'none';
                });
            };
            
            updateIcons('.moon-icon', '.sun-icon');
            updateIcons('.mobile-moon-icon', '.mobile-sun-icon');
            
            localStorage.setItem('theme', isDark ? 'dark' : 'light');
        }

        function toggleTheme() {
            isDark = !isDark;
            updateTheme();
        }

        // Language functionality
        function updateLanguage(lang) {
            localStorage.setItem('language', lang);
            
            const langSwitch = document.getElementById('langSwitch');
            const mobileLangSwitch = document.getElementById('mobileLangSwitch');
            
            if (langSwitch) langSwitch.value = lang;
            if (mobileLangSwitch) mobileLangSwitch.value = lang;
        }

        // Authentication functionality
        function updateAuthState() {
            const authSection = document.getElementById('authSection');
            const userSection = document.getElementById('userSection');
            const logoutBtn = document.getElementById('logoutBtn');
            
            if (isLoggedIn && currentUser) {
                authSection.style.display = 'none';
                userSection.style.display = 'block';
                logoutBtn.style.display = 'block';
                
                document.getElementById('userName').textContent = currentUser.name;
                document.getElementById('userEmail').textContent = currentUser.email;
            } else {
                authSection.style.display = 'block';
                userSection.style.display = 'none';
                logoutBtn.style.display = 'none';
            }
        }

        function login() {
            const name = prompt('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:') || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å';
            const email = prompt('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à email:') || 'user@example.com';
            
            if (name && email) {
                currentUser = { name, email };
                isLoggedIn = true;
                
                localStorage.setItem('isLoggedIn', 'true');
                localStorage.setItem('currentUser', JSON.stringify(currentUser));
                
                updateAuthState();
                closeMenu();
                
                showNotification(`–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${name}!`, 'success');
            }
        }

        function logout() {
            if (confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?')) {
                isLoggedIn = false;
                currentUser = null;
                
                localStorage.removeItem('isLoggedIn');
                localStorage.removeItem('currentUser');
                
                updateAuthState();
                closeMenu();
                
                showNotification('–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã', 'success');
            }
        }

        // Menu functionality
        function toggleMenu() {
            const sideMenu = document.getElementById('sideMenu');
            const menuOverlay = document.getElementById('menuOverlay');
            
            sideMenu.classList.toggle('open');
            menuOverlay.classList.toggle('show');
        }

        function closeMenu() {
            const sideMenu = document.getElementById('sideMenu');
            const menuOverlay = document.getElementById('menuOverlay');
            
            sideMenu.classList.remove('open');
            menuOverlay.classList.remove('show');
        }

        // Random manga functionality
        function openRandomManga() {
            if (window.MangaAPI) {
                const allManga = window.MangaAPI.getAllManga();
                if (allManga.length > 0) {
                    const randomManga = allManga[Math.floor(Math.random() * allManga.length)];
                    window.location.href = `player.html?id=${randomManga.id}`;
                } else {
                    showNotification('–ö–∞—Ç–∞–ª–æ–≥ –ø—É—Å—Ç', 'error');
                }
            } else {
                showNotification('–°–∏—Å—Ç–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞', 'error');
            }
        }

        // === –£–õ–£–ß–®–ï–ù–ù–ê–Ø –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ö–ê–ë–ò–ù–ï–¢–ê ===
        async function initializeCabinet() {
            console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞...');
            
            try {
                const dataLoaded = await loadDataSystemSafely();
                
                if (!window.MangaAPI) {
                    console.error('‚ùå MangaAPI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–∞–∂–µ –ø–æ—Å–ª–µ fallback');
                    showNotification('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Å–∏—Å—Ç–µ–º—ã –¥–∞–Ω–Ω—ã—Ö', 'error');
                    return;
                }

                console.log(`‚úÖ –°–∏—Å—Ç–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ (${window.MangaAPI._isMock ? 'Mock' : 'Real'} API)`);
                
                const testManga = window.MangaAPI.getAllManga();
                console.log(`üìö –î–æ—Å—Ç—É–ø–Ω–æ ${testManga.length} —Ç–∞–π—Ç–ª–æ–≤`);

                loadUserLists();
                updateCounts();
                loadDonationProjects();
                
                console.log('‚úÖ –õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç –ø–æ–ª–Ω–æ—Å—Ç—å—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
                
            } catch (error) {
                console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
                showNotification('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã', 'error');
            }
        }

        // Load user lists from localStorage
        function loadUserLists() {
            Object.keys(userLists).forEach(listName => {
                const saved = localStorage.getItem(listName);
                if (saved) {
                    try {
                        userLists[listName] = JSON.parse(saved);
                    } catch (e) {
                        console.error(`Error loading ${listName}:`, e);
                        userLists[listName] = [];
                    }
                }
            });
        }

        // Update section counts
        function updateCounts() {
            Object.keys(userLists).forEach(listName => {
                const countElement = document.getElementById(listName + 'Count');
                if (countElement) {
                    countElement.textContent = userLists[listName].length;
                }
            });
        }

        // === –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ó–ê–ì–†–£–ó–ö–ê –ü–†–û–ï–ö–¢–û–í –î–û–ù–ê–¢–û–í ===
        function loadDonationProjects() {
            console.log('üöÄ –ó–∞–ø—É—Å–∫ loadDonationProjects...');
            
            const container = document.getElementById('donationProjectsContainer');
            if (!container) {
                console.error('‚ùå –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä donationProjectsContainer –Ω–µ –Ω–∞–π–¥–µ–Ω');
                return;
            }

            if (!window.MangaAPI) {
                console.warn('‚ö†Ô∏è MangaAPI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É...');
                container.innerHTML = `
                    <div class="loading">
                        <div class="spinner"></div>
                        –°–∏—Å—Ç–µ–º–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–≥—Ä—É–∂–∞–µ—Ç—Å—è...
                    </div>
                `;
                return;
            }

            try {
                // –ß–ò–¢–ê–ï–ú –î–û–ù–ê–¢-–ü–†–û–ï–ö–¢–´ –ò–ó –ê–î–ú–ò–ù–ö–ò
                const donationProjects = JSON.parse(localStorage.getItem('lightfox_donation_projects') || '[]');
                console.log(`üí∞ –ù–∞–π–¥–µ–Ω–æ ${donationProjects.length} –¥–æ–Ω–∞—Ç-–ø—Ä–æ–µ–∫—Ç–æ–≤ –∏–∑ –∞–¥–º–∏–Ω–∫–∏`);

                if (donationProjects.length === 0) {
                    // Fallback: –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É –∏–∑ MangaAPI
                    return loadDonationProjectsFromAPI();
                }

                // –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º < 100%
                const activeProjects = donationProjects.filter(project => {
                    if (project.status !== 'active') return false;
                    
                    const progress = (project.currentAmount / project.goal) * 100;
                    const needsDonation = progress < 100;
                    
                    if (needsDonation) {
                        console.log(`üí∞ –ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–µ–∫—Ç "${project.title}": ${project.currentAmount}/${project.goal} (${progress.toFixed(1)}%)`);
                    }
                    
                    return needsDonation;
                }).slice(0, 6); // –ú–∞–∫—Å–∏–º—É–º 6 –ø—Ä–æ–µ–∫—Ç–æ–≤

                console.log(`‚úÖ –û—Ç–æ–±—Ä–∞–Ω–æ ${activeProjects.length} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è`);

                if (activeProjects.length === 0) {
                    container.innerHTML = `
                        <div class="empty-state">
                            <div class="empty-icon">üéâ</div>
                            <div class="empty-title">–í—Å–µ —Ü–µ–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã!</div>
                            <div class="empty-text">–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–æ–µ–∫—Ç–æ–≤</div>
                        </div>
                    `;
                    return;
                }

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –¥–ª—è –ø—Ä–æ–µ–∫—Ç–æ–≤
                const projectsHTML = activeProjects.map(project => {
                    console.log(`üé® –°–æ–∑–¥–∞—é –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –ø—Ä–æ–µ–∫—Ç–∞ "${project.title}"`);
                    return renderDonationProjectCard(project);
                }).join('');

                container.innerHTML = `
                    <div class="donation-projects">
                        ${projectsHTML}
                    </div>
                `;

                console.log('‚úÖ –î–æ–Ω–∞—Ç-–ø—Ä–æ–µ–∫—Ç—ã –∏–∑ –∞–¥–º–∏–Ω–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ');

            } catch (error) {
                console.error('‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ loadDonationProjects:', error);
                // Fallback –Ω–∞ —Å—Ç–∞—Ä—É—é —Å–∏—Å—Ç–µ–º—É
                loadDonationProjectsFromAPI();
            }
        }

        // Fallback —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å–æ —Å—Ç–∞—Ä–æ–π —Å–∏—Å—Ç–µ–º–æ–π
        function loadDonationProjectsFromAPI() {
            console.log('üîÑ –ò—Å–ø–æ–ª—å–∑—É—é fallback: –∑–∞–≥—Ä—É–∑–∫–∞ —á–µ—Ä–µ–∑ MangaAPI');
            
            const container = document.getElementById('donationProjectsContainer');
            const allManga = window.MangaAPI.getAllManga();

            if (!allManga || allManga.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <div class="empty-icon">üìö</div>
                        <div class="empty-title">–ü–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ–µ–∫—Ç–æ–≤</div>
                        <div class="empty-text">–¢–∞–π—Ç–ª—ã –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å</div>
                        <a href="catalog.html" class="empty-action">
                            <span>üîç</span>
                            –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥
                        </a>
                    </div>
                `;
                return;
            }

            // –§–∏–ª—å—Ç—Ä—É–µ–º –º–∞–Ω–≥–∞ —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ –¥–æ–Ω–∞—Ç–∞–º–∏
            const activeProjects = allManga.filter(manga => {
                const current = manga.currentDonations || 0;
                const goal = manga.donationGoal || 10000;
                const progress = (current / goal) * 100;
                return progress < 100;
            }).slice(0, 6);

            if (activeProjects.length === 0) {
                container.innerHTML = `
                    <div class="empty-state">
                        <div class="empty-icon">üéâ</div>
                        <div class="empty-title">–í—Å–µ —Ü–µ–ª–∏ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—ã!</div>
                        <div class="empty-text">–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥–¥–µ—Ä–∂–∫—É –ø—Ä–æ–µ–∫—Ç–æ–≤</div>
                    </div>
                `;
                return;
            }

            const projectsHTML = activeProjects.map(manga => renderDonationCard(manga)).join('');
            container.innerHTML = `
                <div class="donation-projects">
                    ${projectsHTML}
                </div>
            `;
        }

        // –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ –¥–æ–Ω–∞—Ç-–ø—Ä–æ–µ–∫—Ç–∞ (–∏–∑ –∞–¥–º–∏–Ω–∫–∏)
        function renderDonationProjectCard(project) {
            if (!project) {
                console.error('‚ùå –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∞ –ø—É—Å—Ç–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞');
                return '';
            }

            // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –º–∞–Ω–≥–∏ –¥–ª—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            const manga = window.MangaAPI ? window.MangaAPI.getMangaById(project.mangaId) : null;
            
            const progress = Math.min((project.currentAmount / project.goal) * 100, 100);
            const title = project.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ–µ–∫—Ç';
            const mangaTitle = manga ? manga.title : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –º–∞–Ω–≥–∞';
            const type = manga ? manga.type : '–ü—Ä–æ–µ–∫—Ç';
            const year = manga ? manga.year : '';
            
            // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: –ø—Ä–æ–µ–∫—Ç > –º–∞–Ω–≥–∞ > placeholder
            const image = project.image || 
                         (manga ? manga.image : null) || 
                         `https://via.placeholder.com/60x80/8b5cf6/FFFFFF?text=${encodeURIComponent(title.charAt(0))}`;

            return `
                <div class="donation-card">
                    <div class="donation-header">
                        <img src="${image}" 
                             alt="${title}" 
                             class="donation-poster"
                             onerror="this.src='https://via.placeholder.com/60x80/8b5cf6/FFFFFF?text=${encodeURIComponent(title.charAt(0))}'">
                        <div class="donation-info">
                            <h3>${title}</h3>
                            <div class="donation-meta">${type}${year ? ` ‚Ä¢ ${year}` : ''}</div>
                            ${project.description ? `<div style="font-size: 0.75rem; color: var(--secondary-color); margin-top: 4px;">${project.description}</div>` : ''}
                        </div>
                    </div>
                    
                    <div class="donation-progress">
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${progress}%"></div>
                        </div>
                        <div class="progress-text">
                            <span>${project.currentAmount.toLocaleString()}‚ÇΩ</span>
                            <span>${project.goal.toLocaleString()}‚ÇΩ</span>
                        </div>
                    </div>

                    <div class="donation-input-group">
                        <input type="number" class="donation-input" 
                               placeholder="–°—É–º–º–∞" min="10" max="50000" 
                               id="donationAmountProject${project.id}">
                        <button class="donate-btn" onclick="makeDonationToProject(${project.id})">üíù –î–æ–Ω–∞—Ç</button>
                    </div>

                    <div class="donation-quick-buttons">
                        <button class="quick-donate-btn" onclick="quickDonateToProject(${project.id}, 100)">100‚ÇΩ</button>
                        <button class="quick-donate-btn" onclick="quickDonateToProject(${project.id}, 500)">500‚ÇΩ</button>
                        <button class="quick-donate-btn" onclick="quickDonateToProject(${project.id}, 1000)">1K‚ÇΩ</button>
                    </div>
                </div>
            `;
        }

        // –†–µ–Ω–¥–µ—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ –º–∞–Ω–≥–∏ (—Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞)
        function renderDonationCard(manga) {
            if (!manga) return '';

            const current = manga.currentDonations || 0;
            const goal = manga.donationGoal || 10000;
            const progress = Math.min((current / goal) * 100, 100);
            const title = manga.title || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∞–π—Ç–ª';
            const type = manga.type || '–ú–∞–Ω–≥–∞';
            const year = manga.year || 'N/A';
            const image = manga.image || `https://via.placeholder.com/60x80/FF6B35/FFFFFF?text=${encodeURIComponent(title.charAt(0))}`;

            return `
                <div class="donation-card">
                    <div class="donation-header">
                        <img src="${image}" 
                             alt="${title}" 
                             class="donation-poster"
                             onerror="this.src='https://via.placeholder.com/60x80/FF6B35/FFFFFF?text=${encodeURIComponent(title.charAt(0))}'">
                        <div class="donation-info">
                            <h3>${title}</h3>
                            <div class="donation-meta">${type} ‚Ä¢ ${year}</div>
                        </div>
                    </div>
                    
                    <div class="donation-progress">
                        <div class="progress-bar">
                            <div class="progress-fill" style="width: ${progress}%"></div>
                        </div>
                        <div class="progress-text">
                            <span>${current.toLocaleString()}‚ÇΩ</span>
                            <span>${goal.toLocaleString()}‚ÇΩ</span>
                        </div>
                    </div>

                    <div class="donation-input-group">
                        <input type="number" class="donation-input" 
                               placeholder="–°—É–º–º–∞" min="10" max="50000" 
                               id="donationAmount${manga.id}">
                        <button class="donate-btn" onclick="makeDonation('${manga.id}')">üíù –î–æ–Ω–∞—Ç</button>
                    </div>

                    <div class="donation-quick-buttons">
                        <button class="quick-donate-btn" onclick="quickDonate('${manga.id}', 100)">100‚ÇΩ</button>
                        <button class="quick-donate-btn" onclick="quickDonate('${manga.id}', 500)">500‚ÇΩ</button>
                        <button class="quick-donate-btn" onclick="quickDonate('${manga.id}', 1000)">1K‚ÇΩ</button>
                    </div>
                </div>
            `;
        }

        // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ–Ω–∞—Ç–æ–≤ –≤ –ø—Ä–æ–µ–∫—Ç—ã (–Ω–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞)
        function quickDonateToProject(projectId, amount) {
            const input = document.getElementById(`donationAmountProject${projectId}`);
            if (input) {
                input.value = amount;
                makeDonationToProject(projectId);
            }
        }

        function makeDonationToProject(projectId) {
            const amountInput = document.getElementById(`donationAmountProject${projectId}`);
            const amount = parseInt(amountInput.value) || 0;

            if (amount < 10) {
                showNotification('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 10‚ÇΩ', 'error');
                return;
            }

            if (amount > 50000) {
                showNotification('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 50,000‚ÇΩ', 'error');
                return;
            }

            try {
                // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–æ–Ω–∞—Ç-–ø—Ä–æ–µ–∫—Ç—ã
                const donationProjects = JSON.parse(localStorage.getItem('lightfox_donation_projects') || '[]');
                const projectIndex = donationProjects.findIndex(p => p.id === projectId);
                
                if (projectIndex === -1) {
                    showNotification('–ü—Ä–æ–µ–∫—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
                    return;
                }

                const project = donationProjects[projectIndex];
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º—É
                const newTotal = Math.min(project.currentAmount + amount, project.goal);
                donationProjects[projectIndex].currentAmount = newTotal;
                donationProjects[projectIndex].updatedAt = new Date().toISOString();
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã
                localStorage.setItem('lightfox_donation_projects', JSON.stringify(donationProjects));
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–æ–Ω–∞—Ç–æ–≤
                const donationHistory = JSON.parse(localStorage.getItem('donationHistory') || '[]');
                donationHistory.push({
                    projectId: projectId,
                    projectTitle: project.title,
                    mangaId: project.mangaId,
                    amount: amount,
                    timestamp: new Date().toISOString()
                });
                localStorage.setItem('donationHistory', JSON.stringify(donationHistory));

                // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
                amountInput.value = '';

                // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ–µ–∫—Ç—ã
                loadDonationProjects();

                showNotification(`–°–ø–∞—Å–∏–±–æ! –î–æ–±–∞–≤–ª–µ–Ω–æ ${amount.toLocaleString()}‚ÇΩ –≤ "${project.title}"`, 'success');
                
                // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
                window.dispatchEvent(new CustomEvent('donationUpdate', {
                    detail: { projectId, newAmount: newTotal }
                }));

            } catch (error) {
                console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–Ω–∞—Ç–µ –≤ –ø—Ä–æ–µ–∫—Ç:', error);
                showNotification('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–Ω–∞—Ç–∞', 'error');
            }
        }

        // –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–æ–Ω–∞—Ç–æ–≤ –≤ –º–∞–Ω–≥–∞ (—Å—Ç–∞—Ä–∞—è —Å–∏—Å—Ç–µ–º–∞)
        function quickDonate(mangaId, amount) {
            const input = document.getElementById(`donationAmount${mangaId}`);
            if (input) {
                input.value = amount;
                makeDonation(mangaId);
            }
        }

        function makeDonation(mangaId) {
            const amountInput = document.getElementById(`donationAmount${mangaId}`);
            const amount = parseInt(amountInput.value) || 0;

            if (amount < 10) {
                showNotification('–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 10‚ÇΩ', 'error');
                return;
            }

            if (amount > 50000) {
                showNotification('–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞: 50,000‚ÇΩ', 'error');
                return;
            }

            if (window.MangaAPI) {
                const manga = window.MangaAPI.getMangaById(mangaId);
                if (manga) {
                    const newTotal = Math.min((manga.currentDonations || 0) + amount, manga.donationGoal || 10000);
                    
                    const updated = window.MangaAPI.updateManga(mangaId, {
                        currentDonations: newTotal
                    });

                    if (updated) {
                        const donationHistory = JSON.parse(localStorage.getItem('donationHistory') || '[]');
                        donationHistory.push({
                            mangaId: mangaId,
                            mangaTitle: manga.title,
                            amount: amount,
                            timestamp: new Date().toISOString()
                        });
                        localStorage.setItem('donationHistory', JSON.stringify(donationHistory));

                        amountInput.value = '';
                        loadDonationProjects();

                        showNotification(`–°–ø–∞—Å–∏–±–æ! –î–æ–±–∞–≤–ª–µ–Ω–æ ${amount.toLocaleString()}‚ÇΩ`, 'success');
                        
                        window.dispatchEvent(new CustomEvent('mangaDataUpdate', {
                            detail: { mangaId, newDonations: newTotal }
                        }));
                    } else {
                        showNotification('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è', 'error');
                    }
                } else {
                    showNotification('–¢–∞–π—Ç–ª –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
                }
            } else {
                showNotification('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω', 'error');
            }
        }

        // Section navigation
        function openSection(sectionName) {
            currentSection = sectionName;
            
            document.getElementById('dashboard-view').style.display = 'none';
            document.getElementById('section-detail').classList.add('active');
            
            const titles = {
                favorites: '–ò–∑–±—Ä–∞–Ω–Ω–æ–µ',
                watching: '–°–º–æ—Ç—Ä—é',
                wantToWatch: '–•–æ—á—É –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å',
                completed: '–î–æ—Å–º–æ—Ç—Ä–µ–ª'
            };
            document.getElementById('sectionTitle').textContent = titles[sectionName] || sectionName;
            
            loadSectionContent(sectionName);
        }

        function backToDashboard() {
            document.getElementById('dashboard-view').style.display = 'block';
            document.getElementById('section-detail').classList.remove('active');
            currentSection = null;
        }

        // Load section content
        function loadSectionContent(sectionName) {
            const container = document.getElementById('sectionContent');
            const items = userLists[sectionName] || [];

            if (items.length === 0) {
                const emptyStates = {
                    favorites: {
                        icon: '‚ù§Ô∏è',
                        title: '–ù–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Ç–∞–π—Ç–ª–æ–≤',
                        text: '–î–æ–±–∞–≤–ª—è–π—Ç–µ —Ç–∞–π—Ç–ª—ã –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ –∏–∑ –∫–∞—Ç–∞–ª–æ–≥–∞ –∏–ª–∏ –ø–ª–µ–µ—Ä–∞'
                    },
                    watching: {
                        icon: '‚ñ∂Ô∏è',
                        title: '–ù–µ —á–∏—Ç–∞–µ—Ç–µ —Ç–∞–π—Ç–ª—ã',
                        text: '–ù–∞—á–Ω–∏—Ç–µ —á–∏—Ç–∞—Ç—å —Ç–∞–π—Ç–ª—ã –∏ –æ–Ω–∏ –ø–æ—è–≤—è—Ç—Å—è –∑–¥–µ—Å—å'
                    },
                    wantToWatch: {
                        icon: 'üìö',
                        title: '–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç',
                        text: '–î–æ–±–∞–≤–ª—è–π—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ç–∞–π—Ç–ª—ã –≤ –ø–ª–∞–Ω—ã'
                    },
                    completed: {
                        icon: '‚úÖ',
                        title: '–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö',
                        text: '–ü—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —Ç–∞–π—Ç–ª—ã –±—É–¥—É—Ç –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è –∑–¥–µ—Å—å'
                    }
                };

                const state = emptyStates[sectionName];
                container.innerHTML = `
                    <div class="empty-state">
                        <div class="empty-icon">${state.icon}</div>
                        <div class="empty-title">${state.title}</div>
                        <div class="empty-text">${state.text}</div>
                        <a href="catalog.html" class="empty-action">
                            <span>üîç</span>
                            –û—Ç–∫—Ä—ã—Ç—å –∫–∞—Ç–∞–ª–æ–≥
                        </a>
                    </div>
                `;
                return;
            }

            container.innerHTML = `
                <div class="manga-grid">
                    ${items.map(item => renderMangaCard(item)).join('')}
                </div>
            `;
        }

        // Render manga card for lists
        function renderMangaCard(item) {
            let manga = item;
            if (window.MangaAPI && item.mangaId) {
                const apiData = window.MangaAPI.getMangaById(item.mangaId);
                if (apiData) {
                    manga = { ...item, ...apiData };
                }
            }

            return `
                <div class="manga-card" onclick="openManga(${manga.mangaId || manga.id})">
                    <div class="manga-poster-container">
                        <img src="${manga.image || 'https://via.placeholder.com/180x240/FF6B35/FFFFFF?text=' + encodeURIComponent((manga.title || '').charAt(0))}" 
                             alt="${manga.title}" class="manga-poster">
                        ${manga.currentEpisode ? `<div class="manga-badge">–°–µ—Ä–∏—è ${manga.currentEpisode}</div>` : ''}
                    </div>
                    
                    <div class="manga-info">
                        <div class="manga-title">${manga.title}</div>
                        <div class="manga-meta">
                            ${manga.type || '–ú–∞–Ω–≥–∞'} ‚Ä¢ ‚≠ê ${manga.rating || 'N/A'}
                        </div>
                        
                        <div class="manga-actions">
                            <button class="action-btn primary" onclick="event.stopPropagation(); openManga(${manga.mangaId || manga.id})">
                                –ß–∏—Ç–∞—Ç—å
                            </button>
                            <button class="action-btn" onclick="event.stopPropagation(); removeFromList('${currentSection}', ${item.id || item.mangaId})">
                                –£–¥–∞–ª–∏—Ç—å
                            </button>
                        </div>
                    </div>
                </div>
            `;
        }

        // User actions
        function openManga(mangaId) {
            if (mangaId && mangaId !== 'undefined') {
                window.location.href = `player.html?id=${mangaId}`;
            } else {
                showNotification('–¢–∞–π—Ç–ª –Ω–µ –Ω–∞–π–¥–µ–Ω', 'error');
            }
        }

        function removeFromList(listName, itemId) {
            const list = userLists[listName];
            const index = list.findIndex(item => (item.id || item.mangaId) === itemId);
            
            if (index !== -1) {
                list.splice(index, 1);
                localStorage.setItem(listName, JSON.stringify(list));
                updateCounts();
                
                if (currentSection === listName) {
                    loadSectionContent(listName);
                }
                
                showNotification('–£–¥–∞–ª–µ–Ω–æ –∏–∑ —Å–ø–∏—Å–∫–∞', 'success');
            }
        }

        // Utility functions
        function showNotification(message, type = 'success') {
            const notification = document.getElementById('notification');
            notification.textContent = message;
            notification.className = `notification show ${type}`;
            
            setTimeout(() => {
                notification.classList.remove('show');
            }, 3000);
        }

        // === –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –ò –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ===
        document.addEventListener('DOMContentLoaded', function() {
            console.log('üéØ DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –Ω–∞—á–∏–Ω–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é...');
            
            // Theme toggles
            document.getElementById('themeToggle').addEventListener('click', toggleTheme);
            document.getElementById('mobileThemeToggle').addEventListener('click', toggleTheme);

            // Language switches
            const langSwitch = document.getElementById('langSwitch');
            const mobileLangSwitch = document.getElementById('mobileLangSwitch');
            
            if (langSwitch) {
                langSwitch.addEventListener('change', (e) => updateLanguage(e.target.value));
            }
            if (mobileLangSwitch) {
                mobileLangSwitch.addEventListener('change', (e) => updateLanguage(e.target.value));
            }

            // Profile buttons
            document.getElementById('profileBtn').addEventListener('click', toggleMenu);
            document.getElementById('mobileProfileBtn').addEventListener('click', (e) => {
                e.preventDefault();
                toggleMenu();
            });

            // Menu overlay
            document.getElementById('menuOverlay').addEventListener('click', closeMenu);

            // Initialize
            updateTheme();
            updateAuthState();
            
            // Load saved language
            const savedLang = localStorage.getItem('language') || 'ru';
            updateLanguage(savedLang);

            // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∫–∞–±–∏–Ω–µ—Ç–∞
            initializeCabinet();

            // Listen for storage updates from other pages
            window.addEventListener('storage', function(e) {
                if (['favorites', 'watching', 'wantToWatch', 'completed'].includes(e.key)) {
                    loadUserLists();
                    updateCounts();
                    if (currentSection) {
                        loadSectionContent(currentSection);
                    }
                }
            });
        });

        // Listen for data ready event
        window.addEventListener('mangaDataReady', function(e) {
            console.log('üì° –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ mangaDataReady');
            loadDonationProjects();
        });

        window.addEventListener('mangaDataUpdate', function(e) {
            console.log('üì° –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ mangaDataUpdate');
            loadDonationProjects();
        });

        // Keyboard shortcuts
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                closeMenu();
            }
        });

        // –≠–∫—Å–ø–æ—Ä—Ç —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è onclick
        window.openSection = openSection;
        window.backToDashboard = backToDashboard;
        window.openManga = openManga;
        window.removeFromList = removeFromList;
        window.makeDonation = makeDonation;
        window.quickDonate = quickDonate;
        window.makeDonationToProject = makeDonationToProject;
        window.quickDonateToProject = quickDonateToProject;
        window.openRandomManga = openRandomManga;
        window.login = login;
        window.logout = logout;
        window.closeMenu = closeMenu;

        console.log('üéâ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –¥–æ–Ω–∞—Ç-–ø—Ä–æ–µ–∫—Ç–æ–≤ –≥–æ—Ç–æ–≤!');