const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const { validationResult } = require('express-validator');
const { authenticateToken } = require('../middleware/auth');
const { userValidation } = require('../utils/validation');
const { sanitizeInput } = require('../utils/security');

const router = express.Router();

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è JWT —Ç–æ–∫–µ–Ω–∞
const generateToken = (userId) => {
    return jwt.sign(
        { userId, iat: Math.floor(Date.now() / 1000) }, 
        process.env.JWT_SECRET || 'fallback-secret', 
        { expiresIn: process.env.JWT_EXPIRES_IN || '7d' }
    );
};

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
const getDeviceInfo = (req) => {
    const userAgent = req.headers['user-agent'] || '';
    const ip = req.ip || req.connection.remoteAddress || 'unknown';
    
    let deviceType = 'Desktop';
    let browser = 'Unknown';
    
    if (/Mobi|Android/i.test(userAgent)) {
        deviceType = 'Mobile';
    } else if (/Tablet|iPad/i.test(userAgent)) {
        deviceType = 'Tablet';
    }
    
    if (userAgent.includes('Chrome')) browser = 'Chrome';
    else if (userAgent.includes('Firefox')) browser = 'Firefox';
    else if (userAgent.includes('Safari')) browser = 'Safari';
    else if (userAgent.includes('Edge')) browser = 'Edge';
    
    return {
        deviceType,
        browser,
        userAgent: userAgent.substring(0, 500), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É
        ipAddress: ip
    };
};

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
router.post('/register', userValidation.register, async (req, res) => {
    try {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ 
                error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', 
                details: errors.array() 
            });
        }

        let { username, email, password } = req.body;
        
        // –û—á–∏—â–∞–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        username = sanitizeInput(username);
        email = sanitizeInput(email);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const existingUser = await req.db.get(
            'SELECT id FROM users WHERE email = ? OR username = ?',
            [email, username]
        );

        if (existingUser) {
            return res.status(400).json({ 
                error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –∏–ª–∏ –∏–º–µ–Ω–µ–º —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç' 
            });
        }

        // –•–µ—à–∏—Ä—É–µ–º –ø–∞—Ä–æ–ª—å
        const saltRounds = parseInt(process.env.BCRYPT_ROUNDS) || 12;
        const passwordHash = await bcrypt.hash(password, saltRounds);

        // –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const result = await req.db.run(
            'INSERT INTO users (username, email, password_hash) VALUES (?, ?, ?)',
            [username, email, passwordHash]
        );

        const userId = result.lastID;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        const deviceInfo = getDeviceInfo(req);
        const deviceId = `device_${userId}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        
        await req.db.run(
            `INSERT INTO user_devices (user_id, device_id, device_type, browser, user_agent, ip_address)
             VALUES (?, ?, ?, ?, ?, ?)`,
            [userId, deviceId, deviceInfo.deviceType, deviceInfo.browser, 
             deviceInfo.userAgent, deviceInfo.ipAddress]
        );

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        const token = generateToken(userId);

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
        await req.db.run('UPDATE users SET last_login = CURRENT_TIMESTAMP WHERE id = ?', [userId]);

        console.log(`‚úÖ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: ${username} (${email})`);
        res.status(201).json({
            message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
            token,
            user: {
                id: userId,
                username,
                email,
                role: 'user'
            }
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' });
    }
});

// –í—Ö–æ–¥
router.post('/login', userValidation.login, async (req, res) => {
    try {
        const errors = validationResult(req);
        if (!errors.isEmpty()) {
            return res.status(400).json({ 
                error: '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏', 
                details: errors.array() 
            });
        }

        let { email, password, rememberMe } = req.body;
        email = sanitizeInput(email);

        // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const user = await req.db.get(
            'SELECT id, username, email, password_hash, role, is_active FROM users WHERE email = ?',
            [email]
        );

        if (!user || !user.is_active) {
            console.warn(`üö® –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞ —Å –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º email: ${email}, IP: ${req.ip}`);
            return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–∞—Ä–æ–ª—å
        const isValidPassword = await bcrypt.compare(password, user.password_hash);
        if (!isValidPassword) {
            console.warn(`üö® –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${email}, IP: ${req.ip}`);
            return res.status(401).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å' });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤
        const deviceCount = await req.db.get(
            'SELECT COUNT(*) as count FROM user_devices WHERE user_id = ? AND is_active = 1',
            [user.id]
        );

        if (deviceCount.count >= 3) {
            return res.status(400).json({ 
                error: '–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤ (–º–∞–∫—Å–∏–º—É–º 3). –û—Ç–≤—è–∂–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.' 
            });
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—Å—Ç—Ä–æ–π—Å—Ç–≤–µ
        const deviceInfo = getDeviceInfo(req);
        const deviceId = `device_${user.id}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
        
        await req.db.run(
            `INSERT OR REPLACE INTO user_devices 
             (user_id, device_id, device_type, browser, user_agent, ip_address, last_used)
             VALUES (?, ?, ?, ?, ?, ?, CURRENT_TIMESTAMP)`,
            [user.id, deviceId, deviceInfo.deviceType, deviceInfo.browser,
             deviceInfo.userAgent, deviceInfo.ipAddress]
        );

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        const tokenExpiry = rememberMe ? '30d' : '7d';
        const token = jwt.sign(
            { userId: user.id, iat: Math.floor(Date.now() / 1000) }, 
            process.env.JWT_SECRET || 'fallback-secret', 
            { expiresIn: tokenExpiry }
        );

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—Ö–æ–¥–∞
        await req.db.run('UPDATE users SET last_login = CURRENT_TIMESTAMP WHERE id = ?', [user.id]);

        console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥: ${user.username} (${user.email})`);
        res.json({
            message: '–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥',
            token,
            user: {
                id: user.id,
                username: user.username,
                email: user.email,
                role: user.role
            }
        });

    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ' });
    }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞
router.get('/verify', authenticateToken, (req, res) => {
    res.json({
        valid: true,
        user: {
            id: req.user.id,
            username: req.user.username,
            email: req.user.email,
            role: req.user.role
        }
    });
});

// –í—ã—Ö–æ–¥
router.post('/logout', authenticateToken, async (req, res) => {
    try {
        // –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º —Ç–µ–∫—É—â–µ–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ
        const deviceInfo = getDeviceInfo(req);
        await req.db.run(
            'UPDATE user_devices SET is_active = 0 WHERE user_id = ? AND user_agent = ?',
            [req.user.id, deviceInfo.userAgent]
        );

        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${req.user.username} –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã`);
        
        res.json({ message: '–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ' });
    }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
router.get('/devices', authenticateToken, async (req, res) => {
    try {
        const devices = await req.db.all(
            `SELECT device_id, device_type, browser, created_at, last_used, is_active
             FROM user_devices WHERE user_id = ? ORDER BY last_used DESC`,
            [req.user.id]
        );

        res.json({ devices });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

// –û—Ç–≤—è–∑–∫–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
router.delete('/devices/:deviceId', authenticateToken, async (req, res) => {
    try {
        const { deviceId } = req.params;

        await req.db.run(
            'UPDATE user_devices SET is_active = 0 WHERE user_id = ? AND device_id = ?',
            [req.user.id, deviceId]
        );

        res.json({ message: '–£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –æ—Ç–≤—è–∑–∞–Ω–æ' });
    } catch (error) {
        console.error('–û—à–∏–±–∫–∞ –æ—Ç–≤—è–∑–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:', error);
        res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
    }
});

module.exports = router;