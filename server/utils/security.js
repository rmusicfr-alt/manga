const rateLimit = require('express-rate-limit');
const helmet = require('helmet');

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ rate limiting
const createRateLimit = (windowMs, max, message) => {
    return rateLimit({
        windowMs,
        max,
        message: { error: message },
        standardHeaders: true,
        legacyHeaders: false,
        handler: (req, res) => {
            res.status(429).json({
                error: message,
                retryAfter: Math.ceil(windowMs / 1000)
            });
        }
    });
};

// –û–±—â–∏–π –ª–∏–º–∏—Ç
const generalLimiter = createRateLimit(
    15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
    100, // 100 –∑–∞–ø—Ä–æ—Å–æ–≤
    '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
);

// –õ–∏–º–∏—Ç –¥–ª—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
const authLimiter = createRateLimit(
    15 * 60 * 1000, // 15 –º–∏–Ω—É—Ç
    5, // 5 –ø–æ–ø—ã—Ç–æ–∫
    '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫ –≤—Ö–æ–¥–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç.'
);

// –õ–∏–º–∏—Ç –¥–ª—è API
const apiLimiter = createRateLimit(
    1 * 60 * 1000, // 1 –º–∏–Ω—É—Ç–∞
    30, // 30 –∑–∞–ø—Ä–æ—Å–æ–≤
    '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ API –∑–∞–ø—Ä–æ—Å–æ–≤. –ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É.'
);

// –õ–∏–º–∏—Ç –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
const adminLimiter = createRateLimit(
    5 * 60 * 1000, // 5 –º–∏–Ω—É—Ç
    50, // 50 –∑–∞–ø—Ä–æ—Å–æ–≤
    '–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ –∞–¥–º–∏–Ω–∫–µ.'
);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Helmet –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
const helmetConfig = {
    contentSecurityPolicy: {
        directives: {
            defaultSrc: ["'self'"],
            styleSrc: ["'self'", "'unsafe-inline'", "https://fonts.googleapis.com"],
            scriptSrc: ["'self'", "'unsafe-inline'"],
            imgSrc: ["'self'", "data:", "https:", "http:", "blob:"],
            connectSrc: ["'self'", "https:", "http:"],
            fontSrc: ["'self'", "https://fonts.gstatic.com"],
            objectSrc: ["'none'"],
            mediaSrc: ["'self'", "https:", "http:", "blob:"],
            frameSrc: ["'self'", "https://www.youtube.com", "https://youtube.com", "https://drive.google.com"],
            workerSrc: ["'self'", "blob:"],
            childSrc: ["'self'", "blob:"]
        }
    },
    crossOriginEmbedderPolicy: false,
    hsts: {
        maxAge: 31536000,
        includeSubDomains: true,
        preload: true
    }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
const sanitizeInput = (input) => {
    if (typeof input !== 'string') return input;
    
    return input
        .trim()
        .replace(/<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi, '') // –£–¥–∞–ª—è–µ–º script —Ç–µ–≥–∏
        .replace(/javascript:/gi, '') // –£–¥–∞–ª—è–µ–º javascript: –ø—Ä–æ—Ç–æ–∫–æ–ª
        .replace(/on\w+\s*=/gi, ''); // –£–¥–∞–ª—è–µ–º event handlers
};

// Middleware –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
const securityLogger = (req, res, next) => {
    const suspiciousPatterns = [
        /script/i,
        /javascript/i,
        /vbscript/i,
        /onload/i,
        /onerror/i,
        /eval\(/i,
        /alert\(/i,
        /document\.cookie/i,
        /window\.location/i
    ];

    const checkSuspicious = (obj, path = '') => {
        for (const [key, value] of Object.entries(obj)) {
            const currentPath = path ? `${path}.${key}` : key;
            
            if (typeof value === 'string') {
                for (const pattern of suspiciousPatterns) {
                    if (pattern.test(value)) {
                        console.warn(`üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω: ${currentPath} = "${value}" –æ—Ç IP: ${req.ip}`);
                        break;
                    }
                }
            } else if (typeof value === 'object' && value !== null) {
                checkSuspicious(value, currentPath);
            }
        }
    };

    if (req.body && typeof req.body === 'object') {
        checkSuspicious(req.body);
    }

    if (req.query && typeof req.query === 'object') {
        checkSuspicious(req.query);
    }

    next();
};

// Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ CSRF (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
const csrfProtection = (req, res, next) => {
    // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º GET –∑–∞–ø—Ä–æ—Å—ã
    if (req.method === 'GET') {
        return next();
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ X-Requested-With –¥–ª—è AJAX –∑–∞–ø—Ä–æ—Å–æ–≤
    const isAjax = req.headers['x-requested-with'] === 'XMLHttpRequest' ||
                   req.headers['content-type']?.includes('application/json');

    if (!isAjax) {
        // –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Ñ–æ—Ä–º –ø—Ä–æ–≤–µ—Ä—è–µ–º referer
        const referer = req.headers.referer;
        const origin = req.headers.origin;
        const host = req.headers.host;

        if (!referer && !origin) {
            return res.status(403).json({ error: '–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç referer –∏–ª–∏ origin' });
        }

        const allowedOrigins = [
            `http://${host}`,
            `https://${host}`,
            process.env.FRONTEND_URL
        ].filter(Boolean);

        const requestOrigin = origin || new URL(referer).origin;
        
        if (!allowedOrigins.includes(requestOrigin)) {
            console.warn(`üö® –ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π CSRF –∑–∞–ø—Ä–æ—Å –æ—Ç: ${requestOrigin}, IP: ${req.ip}`);
            return res.status(403).json({ error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∑–∞–ø—Ä–æ—Å–∞' });
        }
    }

    next();
};

module.exports = {
    generalLimiter,
    authLimiter,
    apiLimiter,
    adminLimiter,
    helmetConfig,
    sanitizeInput,
    securityLogger,
    csrfProtection
};